%implements  MCHP_MCPWM  "C"
%include "MCHP_Functions.tlc"		
%function BlockTypeSetup(block, system) Output
%<HARMONY_RegisterPeripheral("MCPWM",0,block)>
%endfunction
%function BlockInstanceSetup(block, system) void
%if EXISTS(::MCHP_MCPWM_PIC32EFMC_nBlocks)
%assign ::MCHP_MCPWM_PIC32EFMC_nBlocks = ::MCHP_MCPWM_PIC32EFMC_nBlocks + 1
%else
%assign ::MCHP_MCPWM_PIC32EFMC_nBlocks = 1
%assign ::MCHP_MCPWM_bf_ChOn = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_PENH = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_PENL = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_PCLKSEL = -1
%assign ::MCHP_MCPWM_bf_SCLKDIV = -1
%assign ::MCHP_MCPWM_bf_ITB = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_ECAM_extended = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_ECAM = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_MTBS = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_POLH = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_POLL = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_SWAP = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_DTC = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_TRGSEL = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_STRGSEL = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_DTM = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_CL_SRC = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_CL_POL = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_CL_MOD = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_CL_DAT = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_XPRES = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_FLT_SRC = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_FLT_POL = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_FLT_MOD = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_FLT_DAT = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_OVR_ENL = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_OVR_ENH = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_OVR_DAT = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_FLTLEBEN = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_CLLEBEN = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_PHRx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_PHFx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_PLRx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_bf_PLFx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_reg_PTPER = -1
%assign ::MCHP_MCPWM_reg_STPER = -1
%assign ::MCHP_MCPWM_reg_SEVTCMP = -1
%assign ::MCHP_MCPWM_reg_SSEVTCMP = -1
%assign ::MCHP_MCPWM_reg_CHOP = -1
%assign ::MCHP_MCPWM_reg_PDCx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_reg_SDCx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_reg_PHASEx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_reg_DTRx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_reg_ALTDTRx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_reg_DTCOMPx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_reg_TRIGx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_reg_STRIGx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_reg_LEBDLYx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_reg_LEBCONx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_reg_PWMCONx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_reg_IOCONx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MCPWM_reg_TRGCONx = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%endif
%endfunction
%function Start(block, system) Output
%assign ::MCHP_MCPWM_bf_ChOn = MchpLocal2Global(block,::MCHP_MCPWM_bf_ChOn ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_ChOn), "MCHP_MCPWM_bf_ChOn", "")
%assign ::MCHP_MCPWM_bf_PENH = MchpLocal2Global(block,::MCHP_MCPWM_bf_PENH ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_PENH), "MCHP_MCPWM_bf_PENH", "")
%assign ::MCHP_MCPWM_bf_PENL = MchpLocal2Global(block,::MCHP_MCPWM_bf_PENL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_PENL), "MCHP_MCPWM_bf_PENL", "")
%assign ::MCHP_MCPWM_bf_PCLKSEL = MchpLocal2Global(block,::MCHP_MCPWM_bf_PCLKSEL ,  CAST("Number",block.RTWdata.MCHP_MCPWM_bf_PCLKSEL), "MCHP_MCPWM_bf_PCLKSEL", "")
%assign ::MCHP_MCPWM_bf_SCLKDIV = MchpLocal2Global(block,::MCHP_MCPWM_bf_SCLKDIV ,  CAST("Number",block.RTWdata.MCHP_MCPWM_bf_SCLKDIV), "MCHP_MCPWM_bf_SCLKDIV", "")
%assign ::MCHP_MCPWM_bf_ITB = MchpLocal2Global(block,::MCHP_MCPWM_bf_ITB ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_ITB), "MCHP_MCPWM_bf_ITB", "")
%assign ::MCHP_MCPWM_bf_ECAM_extended = MchpLocal2Global(block,::MCHP_MCPWM_bf_ECAM_extended ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_ECAM_extended), "MCHP_MCPWM_bf_ECAM_extended", "")
%assign ::MCHP_MCPWM_bf_ECAM = MchpLocal2Global(block,::MCHP_MCPWM_bf_ECAM ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_ECAM), "MCHP_MCPWM_bf_ECAM", "")
%assign ::MCHP_MCPWM_bf_MTBS = MchpLocal2Global(block,::MCHP_MCPWM_bf_MTBS ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_MTBS), "MCHP_MCPWM_bf_MTBS", "")
%assign ::MCHP_MCPWM_bf_POLH = MchpLocal2Global(block,::MCHP_MCPWM_bf_POLH ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_POLH), "MCHP_MCPWM_bf_POLH", "")
%assign ::MCHP_MCPWM_bf_POLL = MchpLocal2Global(block,::MCHP_MCPWM_bf_POLL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_POLL), "MCHP_MCPWM_bf_POLL", "")
%assign ::MCHP_MCPWM_bf_SWAP = MchpLocal2Global(block,::MCHP_MCPWM_bf_SWAP ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_SWAP), "MCHP_MCPWM_bf_SWAP", "")
%assign ::MCHP_MCPWM_bf_DTC = MchpLocal2Global(block,::MCHP_MCPWM_bf_DTC ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_DTC), "MCHP_MCPWM_bf_DTC", "")
%assign ::MCHP_MCPWM_bf_TRGSEL = MchpLocal2Global(block,::MCHP_MCPWM_bf_TRGSEL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_TRGSEL), "MCHP_MCPWM_bf_TRGSEL", "")
%assign ::MCHP_MCPWM_bf_STRGSEL = MchpLocal2Global(block,::MCHP_MCPWM_bf_STRGSEL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_STRGSEL), "MCHP_MCPWM_bf_STRGSEL", "")
%assign ::MCHP_MCPWM_bf_DTM = MchpLocal2Global(block,::MCHP_MCPWM_bf_DTM ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_DTM), "MCHP_MCPWM_bf_DTM", "")
%assign ::MCHP_MCPWM_bf_CL_SRC = MchpLocal2Global(block,::MCHP_MCPWM_bf_CL_SRC ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_CL_SRC), "MCHP_MCPWM_bf_CL_SRC", "")
%assign ::MCHP_MCPWM_bf_CL_POL = MchpLocal2Global(block,::MCHP_MCPWM_bf_CL_POL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_CL_POL), "MCHP_MCPWM_bf_CL_POL", "")
%assign ::MCHP_MCPWM_bf_CL_MOD = MchpLocal2Global(block,::MCHP_MCPWM_bf_CL_MOD ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_CL_MOD), "MCHP_MCPWM_bf_CL_MOD", "")
%assign ::MCHP_MCPWM_bf_CL_DAT = MchpLocal2Global(block,::MCHP_MCPWM_bf_CL_DAT ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_CL_DAT), "MCHP_MCPWM_bf_CL_DAT", "")
%assign ::MCHP_MCPWM_bf_XPRES = MchpLocal2Global(block,::MCHP_MCPWM_bf_XPRES ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_XPRES), "MCHP_MCPWM_bf_XPRES", "")
%assign ::MCHP_MCPWM_bf_FLT_SRC = MchpLocal2Global(block,::MCHP_MCPWM_bf_FLT_SRC ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_FLT_SRC), "MCHP_MCPWM_bf_FLT_SRC", "")
%assign ::MCHP_MCPWM_bf_FLT_POL = MchpLocal2Global(block,::MCHP_MCPWM_bf_FLT_POL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_FLT_POL), "MCHP_MCPWM_bf_FLT_POL", "")
%assign ::MCHP_MCPWM_bf_FLT_MOD = MchpLocal2Global(block,::MCHP_MCPWM_bf_FLT_MOD ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_FLT_MOD), "MCHP_MCPWM_bf_FLT_MOD", "")
%assign ::MCHP_MCPWM_bf_FLT_DAT = MchpLocal2Global(block,::MCHP_MCPWM_bf_FLT_DAT ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_FLT_DAT), "MCHP_MCPWM_bf_FLT_DAT", "")
%assign ::MCHP_MCPWM_bf_OVR_ENL = MchpLocal2Global(block,::MCHP_MCPWM_bf_OVR_ENL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_OVR_ENL), "MCHP_MCPWM_bf_OVR_ENL", "")
%assign ::MCHP_MCPWM_bf_OVR_ENH = MchpLocal2Global(block,::MCHP_MCPWM_bf_OVR_ENH ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_OVR_ENH), "MCHP_MCPWM_bf_OVR_ENH", "")
%assign ::MCHP_MCPWM_bf_OVR_DAT = MchpLocal2Global(block,::MCHP_MCPWM_bf_OVR_DAT ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_OVR_DAT), "MCHP_MCPWM_bf_OVR_DAT", "")
%assign ::MCHP_MCPWM_bf_FLTLEBEN = MchpLocal2Global(block,::MCHP_MCPWM_bf_FLTLEBEN ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_FLTLEBEN), "MCHP_MCPWM_bf_FLTLEBEN", "")
%assign ::MCHP_MCPWM_bf_CLLEBEN = MchpLocal2Global(block,::MCHP_MCPWM_bf_CLLEBEN ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_CLLEBEN), "MCHP_MCPWM_bf_CLLEBEN", "")
%assign ::MCHP_MCPWM_bf_PHRx = MchpLocal2Global(block,::MCHP_MCPWM_bf_PHRx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_PHRx), "MCHP_MCPWM_bf_PHRx", "")
%assign ::MCHP_MCPWM_bf_PHFx = MchpLocal2Global(block,::MCHP_MCPWM_bf_PHFx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_PHFx), "MCHP_MCPWM_bf_PHFx", "")
%assign ::MCHP_MCPWM_bf_PLRx = MchpLocal2Global(block,::MCHP_MCPWM_bf_PLRx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_PLRx), "MCHP_MCPWM_bf_PLRx", "")
%assign ::MCHP_MCPWM_bf_PLFx = MchpLocal2Global(block,::MCHP_MCPWM_bf_PLFx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_PLFx), "MCHP_MCPWM_bf_PLFx", "")
%assign ::MCHP_MCPWM_reg_PTPER = MchpLocal2Global(block,::MCHP_MCPWM_reg_PTPER ,  CAST("Number",block.RTWdata.MCHP_MCPWM_reg_PTPER), "MCHP_MCPWM_reg_PTPER", "")
%assign ::MCHP_MCPWM_reg_STPER = MchpLocal2Global(block,::MCHP_MCPWM_reg_STPER ,  CAST("Number",block.RTWdata.MCHP_MCPWM_reg_STPER), "MCHP_MCPWM_reg_STPER", "")
%assign ::MCHP_MCPWM_reg_SEVTCMP = MchpLocal2Global(block,::MCHP_MCPWM_reg_SEVTCMP ,  CAST("Number",block.RTWdata.MCHP_MCPWM_reg_SEVTCMP), "MCHP_MCPWM_reg_SEVTCMP", "")
%assign ::MCHP_MCPWM_reg_SSEVTCMP = MchpLocal2Global(block,::MCHP_MCPWM_reg_SSEVTCMP ,  CAST("Number",block.RTWdata.MCHP_MCPWM_reg_SSEVTCMP), "MCHP_MCPWM_reg_SSEVTCMP", "")
%assign ::MCHP_MCPWM_reg_CHOP = MchpLocal2Global(block,::MCHP_MCPWM_reg_CHOP ,  CAST("Number",block.RTWdata.MCHP_MCPWM_reg_CHOP), "MCHP_MCPWM_reg_CHOP", "")
%assign ::MCHP_MCPWM_reg_PDCx = MchpLocal2Global(block,::MCHP_MCPWM_reg_PDCx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_PDCx), "MCHP_MCPWM_reg_PDCx", "")
%assign ::MCHP_MCPWM_reg_SDCx = MchpLocal2Global(block,::MCHP_MCPWM_reg_SDCx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_SDCx), "MCHP_MCPWM_reg_SDCx", "")
%assign ::MCHP_MCPWM_reg_PHASEx = MchpLocal2Global(block,::MCHP_MCPWM_reg_PHASEx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_PHASEx), "MCHP_MCPWM_reg_PHASEx", "")
%assign ::MCHP_MCPWM_reg_DTRx = MchpLocal2Global(block,::MCHP_MCPWM_reg_DTRx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_DTRx), "MCHP_MCPWM_reg_DTRx", "")
%assign ::MCHP_MCPWM_reg_ALTDTRx = MchpLocal2Global(block,::MCHP_MCPWM_reg_ALTDTRx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_ALTDTRx), "MCHP_MCPWM_reg_ALTDTRx", "")
%assign ::MCHP_MCPWM_reg_DTCOMPx = MchpLocal2Global(block,::MCHP_MCPWM_reg_DTCOMPx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_DTCOMPx), "MCHP_MCPWM_reg_DTCOMPx", "")
%assign ::MCHP_MCPWM_reg_TRIGx = MchpLocal2Global(block,::MCHP_MCPWM_reg_TRIGx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_TRIGx), "MCHP_MCPWM_reg_TRIGx", "")
%assign ::MCHP_MCPWM_reg_STRIGx = MchpLocal2Global(block,::MCHP_MCPWM_reg_STRIGx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_STRIGx), "MCHP_MCPWM_reg_STRIGx", "")
%assign ::MCHP_MCPWM_reg_LEBDLYx = MchpLocal2Global(block,::MCHP_MCPWM_reg_LEBDLYx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_LEBDLYx), "MCHP_MCPWM_reg_LEBDLYx", "")
%assign ::MCHP_MCPWM_reg_LEBCONx = MchpLocal2Global(block,::MCHP_MCPWM_reg_LEBCONx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_LEBCONx), "MCHP_MCPWM_reg_LEBCONx", "")
%assign ::MCHP_MCPWM_reg_PWMCONx = MchpLocal2Global(block,::MCHP_MCPWM_reg_PWMCONx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_PWMCONx), "MCHP_MCPWM_reg_PWMCONx", "")
%assign ::MCHP_MCPWM_reg_IOCONx = MchpLocal2Global(block,::MCHP_MCPWM_reg_IOCONx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_IOCONx), "MCHP_MCPWM_reg_IOCONx", "")
%assign ::MCHP_MCPWM_reg_TRGCONx = MchpLocal2Global(block,::MCHP_MCPWM_reg_TRGCONx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_TRGCONx), "MCHP_MCPWM_reg_TRGCONx", "")
%assign g_ITB =  CAST("Number",block.RTWdata.g_ITB)
%assign g_ECAM =  CAST("Number",block.RTWdata.g_ECAM)
%assign g_DTC =  CAST("Number",block.RTWdata.g_DTC)
%assign g_FLTMOD =  CAST("Number",block.RTWdata.g_FLTMOD)
%assign g_FLT_BlockOutput =  CAST("Number",block.RTWdata.g_FLT_BlockOutput)
%assign g_CLMOD =  CAST("Number",block.RTWdata.g_CLMOD)
%assign g_FLTLEBEN =  CAST("Number",block.RTWdata.g_FLTLEBEN)
%assign g_CLLEBEN =  CAST("Number",block.RTWdata.g_CLLEBEN)
%assign g_ChOn =  MchpVector64(block.RTWdata.g_ChOn)
%assign g_FLT_PIN_Letter = CAST("String",block.RTWdata.g_FLT_PIN_Letter)
%assign g_FLT_PIN_Num = CAST("String",block.RTWdata.g_FLT_PIN_Num)
%assign g_FLT_PIN_Pol =  CAST("Number",block.RTWdata.g_FLT_PIN_Pol)
%assign g_MTBS =  CAST("Number",block.RTWdata.g_MTBS)
%assign param_MaxPeriod_s =  MchpVectorDbl(block.RTWdata.param_MaxPeriod_s)
%assign param_InitPeriode_s =  MchpVectorDbl(block.RTWdata.param_InitPeriode_s)
%assign param_InitDutyCycleP_s =  MchpVectorDbl(block.RTWdata.param_InitDutyCycleP_s)
%assign param_InitDutyCycleS_s =  MchpVectorDbl(block.RTWdata.param_InitDutyCycleS_s)
%assign param_InitPhase_s =  MchpVectorDbl(block.RTWdata.param_InitPhase_s)
%assign param_DeadTime_s =  MchpVectorDbl(block.RTWdata.param_DeadTime_s)
%assign param_DeadTimeAlt_s =  MchpVectorDbl(block.RTWdata.param_DeadTimeAlt_s)
%assign param_DeadTimeComp_s =  MchpVectorDbl(block.RTWdata.param_DeadTimeComp_s)
%assign param_LeadEdgeBlkPer_s =  MchpVectorDbl(block.RTWdata.param_LeadEdgeBlkPer_s)
%assign param_InitPeriode_ss =  MchpVectorDbl(block.RTWdata.param_InitPeriode_ss)
%assign param_MaxPeriod_ss =  MchpVectorDbl(block.RTWdata.param_MaxPeriod_ss)
%assign param_MaxPeriod_RAW =  MchpVector64(block.RTWdata.param_MaxPeriod_RAW)
%assign param_PrimaryEventTrigger_s =  CAST("Real",block.RTWdata.param_PrimaryEventTrigger_s)
%assign param_SecondaryEventTrigger_s =  CAST("Real",block.RTWdata.param_SecondaryEventTrigger_s)
%assign param_PrimaryTrig_s =  MchpVectorDbl(block.RTWdata.param_PrimaryTrig_s)
%assign param_SecondaryTrig_s =  MchpVectorDbl(block.RTWdata.param_SecondaryTrig_s)
%assign param_BlockInput_VectorScalar =  CAST("Number",block.RTWdata.param_BlockInput_VectorScalar)
%assign param_BlockInput_Period =  MchpVector64(block.RTWdata.param_BlockInput_Period)
%assign param_BlockInput_DutyCycle =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle)
%assign param_BlockInput_PhaseShift =  MchpVector64(block.RTWdata.param_BlockInput_PhaseShift)
%assign param_BlockInput_SEVTCMP =  CAST("Number",block.RTWdata.param_BlockInput_SEVTCMP)
%assign param_BlockInput_TRIGx =  MchpVector64(block.RTWdata.param_BlockInput_TRIGx)
%assign param_BlockInput_STRIGx =  MchpVector64(block.RTWdata.param_BlockInput_STRIGx)
%assign param_BlockInput_DeadTime =  MchpVector64(block.RTWdata.param_BlockInput_DeadTime)
%assign param_BlockInput_DeadTimeAlt =  MchpVector64(block.RTWdata.param_BlockInput_DeadTimeAlt)
%assign param_BlockInput_Period_ITB0 =  CAST("Number",block.RTWdata.param_BlockInput_Period_ITB0)
%assign param_BlockInput_DutyCycle_Half =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half)
%assign param_BlockInput_DutyCycle_Half_1 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_1)
%assign param_BlockInput_DutyCycle_Half_2 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_2)
%assign param_BlockInput_DutyCycle_Half_3 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_3)
%assign param_BlockInput_DutyCycle_Half_4 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_4)
%assign param_BlockInput_DutyCycle_Half_5 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_5)
%assign param_BlockInput_DutyCycle_Half_6 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_6)
%assign param_BlockInput_DutyCycle_Half_7 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_7)
%assign param_BlockInput_DutyCycle_Half_8 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_8)
%assign param_BlockInput_DutyCycle_Half_9 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_9)
%assign param_BlockInput_DutyCycle_Half_10 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_10)
%assign param_BlockInput_DutyCycle_Half_11 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_11)
%assign param_BlockInput_DutyCycle_Half_12 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_12)
%if EXISTS(::MCHP_MCPWM_PIC32EFMC_iBlocks)
%assign ::MCHP_MCPWM_PIC32EFMC_iBlocks = ::MCHP_MCPWM_PIC32EFMC_iBlocks + 1
%else
%assign ::MCHP_MCPWM_PIC32EFMC_iBlocks = 1
%endif
%if (::MCHP_MCPWM_PIC32EFMC_iBlocks == ::MCHP_MCPWM_PIC32EFMC_nBlocks)	
%assign PWMConfigTXT = ""
%if g_ITB
%assign PHASEx_is = "Period"
%assign PWMConfigTXT = PWMConfigTXT + "Independant Period, "
%else
%assign PHASEx_is = "Phase Shift"
%assign PWMConfigTXT = PWMConfigTXT + "Unique Period, "
%endif
%if g_ECAM == 0
%assign PDC_is = "Duty Cycle"
%assign SDC_is = ""
%assign PWMConfigTXT = PWMConfigTXT + "Edge Aligned mode"
%else
%assign PDC_is = "Half Duty Cycle"
%assign SDC_is = "Second Half Duty Cycle"
%assign PWMConfigTXT = PWMConfigTXT + "Center Aligned mode"
%endif
/* PWM Channels [ %<g_ChOn> ] configured with: %<PWMConfigTXT> */
%if ::MCHP_MCPWM_reg_PTPER != -1
PTPER = %<MchpHex(::MCHP_MCPWM_reg_PTPER)>; /* Primary Period */
%endif
%if ::MCHP_MCPWM_reg_STPER != -1
STPER = %<MchpHex(::MCHP_MCPWM_reg_STPER)>; /* Secondary Period */
%endif
%foreach idx= SIZE(::MCHP_MCPWM_reg_PHASEx,1)
%if ::MCHP_MCPWM_reg_PHASEx[idx] != -1
PHASE%<idx+1> = %<MchpHex(::MCHP_MCPWM_reg_PHASEx[idx])>;	/* %<PHASEx_is> */
%endif
%endforeach
%foreach idx= SIZE(::MCHP_MCPWM_reg_PDCx,1)	
%if ::MCHP_MCPWM_reg_PDCx[idx] != -1
PDC%<idx+1> = %<MchpHex(::MCHP_MCPWM_reg_PDCx[idx])>;	/* %<PDC_is> */
%endif
%endforeach
%foreach idx= SIZE(::MCHP_MCPWM_reg_SDCx,1)	
%if ::MCHP_MCPWM_reg_SDCx[idx] != -1
SDC%<idx+1> = %<MchpHex(::MCHP_MCPWM_reg_SDCx[idx])>;	/* %<SDC_is> */
%endif
%endforeach
%foreach idx= SIZE(::MCHP_MCPWM_reg_DTRx,1)	
%if ::MCHP_MCPWM_reg_DTRx[idx] > 0
DTR%<idx+1> = %<MchpHex(::MCHP_MCPWM_reg_DTRx[idx])>;	/* Dead Time Compensation */
%endif
%endforeach
%foreach idx= SIZE(::MCHP_MCPWM_reg_ALTDTRx,1)	
%if ::MCHP_MCPWM_reg_ALTDTRx[idx] > 0
ALTDTR%<idx+1> = %<MchpHex(::MCHP_MCPWM_reg_ALTDTRx[idx])>;	/* Dead Time Compensation */
%endif
%endforeach
%foreach idx= SIZE(::MCHP_MCPWM_reg_LEBDLYx,1)	
%if ::MCHP_MCPWM_reg_LEBCONx[idx] > 0
LEBCON%<idx+1> = %<MchpHex(::MCHP_MCPWM_reg_LEBCONx[idx])>;	/* Leading Edge Blanking Configuration */
LEBDLY%<idx+1> = %<MchpHex(::MCHP_MCPWM_reg_LEBDLYx[idx])>;	/* Leading Edge Blanking Delay */
%endif
%endforeach
%if MCHP_MCPWM_reg_SEVTCMP != -1
SEVTCMP = %<MchpHex(::MCHP_MCPWM_reg_SEVTCMP)>;	/* Primate Time base trigger */
%endif
%if MCHP_MCPWM_reg_SSEVTCMP != -1
SSEVTCMP = %<MchpHex(::MCHP_MCPWM_reg_SSEVTCMP)>;	/* Secondary Time base trigger */
%endif
%foreach idx= SIZE(::MCHP_MCPWM_reg_TRGCONx,1)	
%if ::MCHP_MCPWM_reg_TRGCONx[idx] >= 0
TRGCON%<idx+1> = %<MchpHex(::MCHP_MCPWM_reg_TRGCONx[idx])>;	/* PWM%<idx+1> Trigger Control Register */
%endif
%endforeach
%foreach idx= SIZE(::MCHP_MCPWM_reg_TRIGx,1)	
%if ::MCHP_MCPWM_reg_TRIGx[idx] > 0
TRIG%<idx+1> = %<MchpHex(::MCHP_MCPWM_reg_TRIGx[idx])>;	/* Primary PWM%<idx+1> Trigger compare value */
%endif
%if ::MCHP_MCPWM_reg_STRIGx[idx] > 0
STRIG%<idx+1> = %<MchpHex(::MCHP_MCPWM_reg_STRIGx[idx])>;	/* Secondary PWM%<idx+1> Trigger compare value */
%endif  	
%endforeach
%foreach idx = SIZE(::MCHP_MCPWM_bf_ChOn,1)
%if ::MCHP_MCPWM_bf_ChOn[idx] != -1
%assign reg_PWMCONx = %<...
(MCHP_MAX0(::MCHP_MCPWM_bf_ECAM[idx]) << 10) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_ITB[idx]) << 9) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_DTC[idx]) << 6) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_MTBS[idx]) << 3) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_XPRES[idx]) << 1) + ...				
0>
PWMCON%<idx+1> = %<MchpHex(reg_PWMCONx)>; 		
%endif	
%endforeach
%foreach idx = SIZE(::MCHP_MCPWM_bf_ChOn,1)
%if ::MCHP_MCPWM_bf_ChOn[idx] != -1
%assign reg_IOCONx = %<...
(MCHP_MAX0(::MCHP_MCPWM_bf_CL_SRC[idx]) << 26) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_CL_POL[idx]) << 25) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_CL_MOD[idx]) << 24) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_CL_DAT[idx]) << 2) + ...
0 + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_FLT_SRC[idx]) << 19) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_FLT_POL[idx]) << 18) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_FLT_MOD[idx]) << 16) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_FLT_DAT[idx]) << 4) + ...
0 + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_OVR_ENH[idx]) << 9) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_OVR_ENL[idx]) << 8) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_OVR_DAT[idx]) << 6) + ...
0 + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_PENH[idx]) << 15) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_PENL[idx]) << 14) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_POLH[idx]) << 13) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_POLL[idx]) << 12) + ...
(MCHP_MAX0(::MCHP_MCPWM_bf_SWAP[idx]) << 1) + ...					
0>		
IOCON%<idx+1> = %<MchpHex(reg_IOCONx)>; 		
%endif	
%endforeach
%if MCHP_MCPWM_bf_SCLKDIV != -1
%assign reg_STCON = %<...				
( ::MCHP_MCPWM_bf_SCLKDIV << 4) + ...
0>
STCON = %<MchpHex(reg_STCON)>; /* Configure Secondary Time Base */			
%endif
%openfile LocalStartup_TrigTimeStepInstruction		
%<::Startup_TrigTimeStepInstruction>\
%if MCHP_MCPWM_bf_PCLKSEL != -1
%assign reg_PTCON = %<...
(1 << 15) + ...
( ::MCHP_MCPWM_bf_PCLKSEL << 4) + ...
0>
PTCON = %<MchpHex(reg_PTCON)>; /* Start PWM */			
%else
PTCON = %<MchpHex( (1<<15) + (7<<4))>; /* Start PWM which does not use Secondary Time base (configured to its lower speed) */			
%endif
%closefile LocalStartup_TrigTimeStepInstruction		
%assign ::Startup_TrigTimeStepInstruction = LocalStartup_TrigTimeStepInstruction
%endif 
%endfunction
%function Outputs(block, system) Output
%assign ::MCHP_MCPWM_bf_ChOn = MchpLocal2Global(block,::MCHP_MCPWM_bf_ChOn ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_ChOn), "MCHP_MCPWM_bf_ChOn", "")
%assign ::MCHP_MCPWM_bf_PENH = MchpLocal2Global(block,::MCHP_MCPWM_bf_PENH ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_PENH), "MCHP_MCPWM_bf_PENH", "")
%assign ::MCHP_MCPWM_bf_PENL = MchpLocal2Global(block,::MCHP_MCPWM_bf_PENL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_PENL), "MCHP_MCPWM_bf_PENL", "")
%assign ::MCHP_MCPWM_bf_PCLKSEL = MchpLocal2Global(block,::MCHP_MCPWM_bf_PCLKSEL ,  CAST("Number",block.RTWdata.MCHP_MCPWM_bf_PCLKSEL), "MCHP_MCPWM_bf_PCLKSEL", "")
%assign ::MCHP_MCPWM_bf_SCLKDIV = MchpLocal2Global(block,::MCHP_MCPWM_bf_SCLKDIV ,  CAST("Number",block.RTWdata.MCHP_MCPWM_bf_SCLKDIV), "MCHP_MCPWM_bf_SCLKDIV", "")
%assign ::MCHP_MCPWM_bf_ITB = MchpLocal2Global(block,::MCHP_MCPWM_bf_ITB ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_ITB), "MCHP_MCPWM_bf_ITB", "")
%assign ::MCHP_MCPWM_bf_ECAM_extended = MchpLocal2Global(block,::MCHP_MCPWM_bf_ECAM_extended ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_ECAM_extended), "MCHP_MCPWM_bf_ECAM_extended", "")
%assign ::MCHP_MCPWM_bf_ECAM = MchpLocal2Global(block,::MCHP_MCPWM_bf_ECAM ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_ECAM), "MCHP_MCPWM_bf_ECAM", "")
%assign ::MCHP_MCPWM_bf_MTBS = MchpLocal2Global(block,::MCHP_MCPWM_bf_MTBS ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_MTBS), "MCHP_MCPWM_bf_MTBS", "")
%assign ::MCHP_MCPWM_bf_POLH = MchpLocal2Global(block,::MCHP_MCPWM_bf_POLH ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_POLH), "MCHP_MCPWM_bf_POLH", "")
%assign ::MCHP_MCPWM_bf_POLL = MchpLocal2Global(block,::MCHP_MCPWM_bf_POLL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_POLL), "MCHP_MCPWM_bf_POLL", "")
%assign ::MCHP_MCPWM_bf_SWAP = MchpLocal2Global(block,::MCHP_MCPWM_bf_SWAP ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_SWAP), "MCHP_MCPWM_bf_SWAP", "")
%assign ::MCHP_MCPWM_bf_DTC = MchpLocal2Global(block,::MCHP_MCPWM_bf_DTC ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_DTC), "MCHP_MCPWM_bf_DTC", "")
%assign ::MCHP_MCPWM_bf_TRGSEL = MchpLocal2Global(block,::MCHP_MCPWM_bf_TRGSEL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_TRGSEL), "MCHP_MCPWM_bf_TRGSEL", "")
%assign ::MCHP_MCPWM_bf_STRGSEL = MchpLocal2Global(block,::MCHP_MCPWM_bf_STRGSEL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_STRGSEL), "MCHP_MCPWM_bf_STRGSEL", "")
%assign ::MCHP_MCPWM_bf_DTM = MchpLocal2Global(block,::MCHP_MCPWM_bf_DTM ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_DTM), "MCHP_MCPWM_bf_DTM", "")
%assign ::MCHP_MCPWM_bf_CL_SRC = MchpLocal2Global(block,::MCHP_MCPWM_bf_CL_SRC ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_CL_SRC), "MCHP_MCPWM_bf_CL_SRC", "")
%assign ::MCHP_MCPWM_bf_CL_POL = MchpLocal2Global(block,::MCHP_MCPWM_bf_CL_POL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_CL_POL), "MCHP_MCPWM_bf_CL_POL", "")
%assign ::MCHP_MCPWM_bf_CL_MOD = MchpLocal2Global(block,::MCHP_MCPWM_bf_CL_MOD ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_CL_MOD), "MCHP_MCPWM_bf_CL_MOD", "")
%assign ::MCHP_MCPWM_bf_CL_DAT = MchpLocal2Global(block,::MCHP_MCPWM_bf_CL_DAT ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_CL_DAT), "MCHP_MCPWM_bf_CL_DAT", "")
%assign ::MCHP_MCPWM_bf_XPRES = MchpLocal2Global(block,::MCHP_MCPWM_bf_XPRES ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_XPRES), "MCHP_MCPWM_bf_XPRES", "")
%assign ::MCHP_MCPWM_bf_FLT_SRC = MchpLocal2Global(block,::MCHP_MCPWM_bf_FLT_SRC ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_FLT_SRC), "MCHP_MCPWM_bf_FLT_SRC", "")
%assign ::MCHP_MCPWM_bf_FLT_POL = MchpLocal2Global(block,::MCHP_MCPWM_bf_FLT_POL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_FLT_POL), "MCHP_MCPWM_bf_FLT_POL", "")
%assign ::MCHP_MCPWM_bf_FLT_MOD = MchpLocal2Global(block,::MCHP_MCPWM_bf_FLT_MOD ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_FLT_MOD), "MCHP_MCPWM_bf_FLT_MOD", "")
%assign ::MCHP_MCPWM_bf_FLT_DAT = MchpLocal2Global(block,::MCHP_MCPWM_bf_FLT_DAT ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_FLT_DAT), "MCHP_MCPWM_bf_FLT_DAT", "")
%assign ::MCHP_MCPWM_bf_OVR_ENL = MchpLocal2Global(block,::MCHP_MCPWM_bf_OVR_ENL ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_OVR_ENL), "MCHP_MCPWM_bf_OVR_ENL", "")
%assign ::MCHP_MCPWM_bf_OVR_ENH = MchpLocal2Global(block,::MCHP_MCPWM_bf_OVR_ENH ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_OVR_ENH), "MCHP_MCPWM_bf_OVR_ENH", "")
%assign ::MCHP_MCPWM_bf_OVR_DAT = MchpLocal2Global(block,::MCHP_MCPWM_bf_OVR_DAT ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_OVR_DAT), "MCHP_MCPWM_bf_OVR_DAT", "")
%assign ::MCHP_MCPWM_bf_FLTLEBEN = MchpLocal2Global(block,::MCHP_MCPWM_bf_FLTLEBEN ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_FLTLEBEN), "MCHP_MCPWM_bf_FLTLEBEN", "")
%assign ::MCHP_MCPWM_bf_CLLEBEN = MchpLocal2Global(block,::MCHP_MCPWM_bf_CLLEBEN ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_CLLEBEN), "MCHP_MCPWM_bf_CLLEBEN", "")
%assign ::MCHP_MCPWM_bf_PHRx = MchpLocal2Global(block,::MCHP_MCPWM_bf_PHRx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_PHRx), "MCHP_MCPWM_bf_PHRx", "")
%assign ::MCHP_MCPWM_bf_PHFx = MchpLocal2Global(block,::MCHP_MCPWM_bf_PHFx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_PHFx), "MCHP_MCPWM_bf_PHFx", "")
%assign ::MCHP_MCPWM_bf_PLRx = MchpLocal2Global(block,::MCHP_MCPWM_bf_PLRx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_PLRx), "MCHP_MCPWM_bf_PLRx", "")
%assign ::MCHP_MCPWM_bf_PLFx = MchpLocal2Global(block,::MCHP_MCPWM_bf_PLFx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_bf_PLFx), "MCHP_MCPWM_bf_PLFx", "")
%assign ::MCHP_MCPWM_reg_PTPER = MchpLocal2Global(block,::MCHP_MCPWM_reg_PTPER ,  CAST("Number",block.RTWdata.MCHP_MCPWM_reg_PTPER), "MCHP_MCPWM_reg_PTPER", "")
%assign ::MCHP_MCPWM_reg_STPER = MchpLocal2Global(block,::MCHP_MCPWM_reg_STPER ,  CAST("Number",block.RTWdata.MCHP_MCPWM_reg_STPER), "MCHP_MCPWM_reg_STPER", "")
%assign ::MCHP_MCPWM_reg_SEVTCMP = MchpLocal2Global(block,::MCHP_MCPWM_reg_SEVTCMP ,  CAST("Number",block.RTWdata.MCHP_MCPWM_reg_SEVTCMP), "MCHP_MCPWM_reg_SEVTCMP", "")
%assign ::MCHP_MCPWM_reg_SSEVTCMP = MchpLocal2Global(block,::MCHP_MCPWM_reg_SSEVTCMP ,  CAST("Number",block.RTWdata.MCHP_MCPWM_reg_SSEVTCMP), "MCHP_MCPWM_reg_SSEVTCMP", "")
%assign ::MCHP_MCPWM_reg_CHOP = MchpLocal2Global(block,::MCHP_MCPWM_reg_CHOP ,  CAST("Number",block.RTWdata.MCHP_MCPWM_reg_CHOP), "MCHP_MCPWM_reg_CHOP", "")
%assign ::MCHP_MCPWM_reg_PDCx = MchpLocal2Global(block,::MCHP_MCPWM_reg_PDCx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_PDCx), "MCHP_MCPWM_reg_PDCx", "")
%assign ::MCHP_MCPWM_reg_SDCx = MchpLocal2Global(block,::MCHP_MCPWM_reg_SDCx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_SDCx), "MCHP_MCPWM_reg_SDCx", "")
%assign ::MCHP_MCPWM_reg_PHASEx = MchpLocal2Global(block,::MCHP_MCPWM_reg_PHASEx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_PHASEx), "MCHP_MCPWM_reg_PHASEx", "")
%assign ::MCHP_MCPWM_reg_DTRx = MchpLocal2Global(block,::MCHP_MCPWM_reg_DTRx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_DTRx), "MCHP_MCPWM_reg_DTRx", "")
%assign ::MCHP_MCPWM_reg_ALTDTRx = MchpLocal2Global(block,::MCHP_MCPWM_reg_ALTDTRx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_ALTDTRx), "MCHP_MCPWM_reg_ALTDTRx", "")
%assign ::MCHP_MCPWM_reg_DTCOMPx = MchpLocal2Global(block,::MCHP_MCPWM_reg_DTCOMPx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_DTCOMPx), "MCHP_MCPWM_reg_DTCOMPx", "")
%assign ::MCHP_MCPWM_reg_TRIGx = MchpLocal2Global(block,::MCHP_MCPWM_reg_TRIGx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_TRIGx), "MCHP_MCPWM_reg_TRIGx", "")
%assign ::MCHP_MCPWM_reg_STRIGx = MchpLocal2Global(block,::MCHP_MCPWM_reg_STRIGx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_STRIGx), "MCHP_MCPWM_reg_STRIGx", "")
%assign ::MCHP_MCPWM_reg_LEBDLYx = MchpLocal2Global(block,::MCHP_MCPWM_reg_LEBDLYx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_LEBDLYx), "MCHP_MCPWM_reg_LEBDLYx", "")
%assign ::MCHP_MCPWM_reg_LEBCONx = MchpLocal2Global(block,::MCHP_MCPWM_reg_LEBCONx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_LEBCONx), "MCHP_MCPWM_reg_LEBCONx", "")
%assign ::MCHP_MCPWM_reg_PWMCONx = MchpLocal2Global(block,::MCHP_MCPWM_reg_PWMCONx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_PWMCONx), "MCHP_MCPWM_reg_PWMCONx", "")
%assign ::MCHP_MCPWM_reg_IOCONx = MchpLocal2Global(block,::MCHP_MCPWM_reg_IOCONx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_IOCONx), "MCHP_MCPWM_reg_IOCONx", "")
%assign ::MCHP_MCPWM_reg_TRGCONx = MchpLocal2Global(block,::MCHP_MCPWM_reg_TRGCONx ,  MchpVector64(block.RTWdata.MCHP_MCPWM_reg_TRGCONx), "MCHP_MCPWM_reg_TRGCONx", "")
%assign g_ITB =  CAST("Number",block.RTWdata.g_ITB)
%assign g_ECAM =  CAST("Number",block.RTWdata.g_ECAM)
%assign g_DTC =  CAST("Number",block.RTWdata.g_DTC)
%assign g_FLTMOD =  CAST("Number",block.RTWdata.g_FLTMOD)
%assign g_FLT_BlockOutput =  CAST("Number",block.RTWdata.g_FLT_BlockOutput)
%assign g_CLMOD =  CAST("Number",block.RTWdata.g_CLMOD)
%assign g_FLTLEBEN =  CAST("Number",block.RTWdata.g_FLTLEBEN)
%assign g_CLLEBEN =  CAST("Number",block.RTWdata.g_CLLEBEN)
%assign g_ChOn =  MchpVector64(block.RTWdata.g_ChOn)
%assign g_FLT_PIN_Letter = CAST("String",block.RTWdata.g_FLT_PIN_Letter)
%assign g_FLT_PIN_Num = CAST("String",block.RTWdata.g_FLT_PIN_Num)
%assign g_FLT_PIN_Pol =  CAST("Number",block.RTWdata.g_FLT_PIN_Pol)
%assign g_MTBS =  CAST("Number",block.RTWdata.g_MTBS)
%assign param_MaxPeriod_s =  MchpVectorDbl(block.RTWdata.param_MaxPeriod_s)
%assign param_InitPeriode_s =  MchpVectorDbl(block.RTWdata.param_InitPeriode_s)
%assign param_InitDutyCycleP_s =  MchpVectorDbl(block.RTWdata.param_InitDutyCycleP_s)
%assign param_InitDutyCycleS_s =  MchpVectorDbl(block.RTWdata.param_InitDutyCycleS_s)
%assign param_InitPhase_s =  MchpVectorDbl(block.RTWdata.param_InitPhase_s)
%assign param_DeadTime_s =  MchpVectorDbl(block.RTWdata.param_DeadTime_s)
%assign param_DeadTimeAlt_s =  MchpVectorDbl(block.RTWdata.param_DeadTimeAlt_s)
%assign param_DeadTimeComp_s =  MchpVectorDbl(block.RTWdata.param_DeadTimeComp_s)
%assign param_LeadEdgeBlkPer_s =  MchpVectorDbl(block.RTWdata.param_LeadEdgeBlkPer_s)
%assign param_InitPeriode_ss =  MchpVectorDbl(block.RTWdata.param_InitPeriode_ss)
%assign param_InitPeriode =  MchpVectorDbl(block.RTWdata.param_InitPeriode)
%assign param_MaxPeriod_ss =  MchpVectorDbl(block.RTWdata.param_MaxPeriod_ss)
%assign param_MaxPeriod_RAW =  MchpVector64(block.RTWdata.param_MaxPeriod_RAW)
%assign param_PrimaryEventTrigger_s =  CAST("Real",block.RTWdata.param_PrimaryEventTrigger_s)
%assign param_SecondaryEventTrigger_s =  CAST("Real",block.RTWdata.param_SecondaryEventTrigger_s)
%assign param_PrimaryTrig_s =  MchpVectorDbl(block.RTWdata.param_PrimaryTrig_s)
%assign param_SecondaryTrig_s =  MchpVectorDbl(block.RTWdata.param_SecondaryTrig_s)
%assign param_BlockInput_VectorScalar =  CAST("Number",block.RTWdata.param_BlockInput_VectorScalar)
%assign param_BlockInput_Period =  MchpVector64(block.RTWdata.param_BlockInput_Period)
%assign param_BlockInput_DutyCycle =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle)
%assign param_BlockInput_PhaseShift =  MchpVector64(block.RTWdata.param_BlockInput_PhaseShift)
%assign param_BlockInput_SEVTCMP =  CAST("Number",block.RTWdata.param_BlockInput_SEVTCMP)
%assign param_BlockInput_TRIGx =  MchpVector64(block.RTWdata.param_BlockInput_TRIGx)
%assign param_BlockInput_STRIGx =  MchpVector64(block.RTWdata.param_BlockInput_STRIGx)
%assign param_BlockInput_DeadTime =  MchpVector64(block.RTWdata.param_BlockInput_DeadTime)
%assign param_BlockInput_DeadTimeAlt =  MchpVector64(block.RTWdata.param_BlockInput_DeadTimeAlt)
%assign param_BlockInput_Period_ITB0 =  CAST("Number",block.RTWdata.param_BlockInput_Period_ITB0)
%assign param_BlockInput_DutyCycle_Half =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half)
%assign param_BlockInput_DutyCycle_Half_1 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_1)
%assign param_BlockInput_DutyCycle_Half_2 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_2)
%assign param_BlockInput_DutyCycle_Half_3 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_3)
%assign param_BlockInput_DutyCycle_Half_4 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_4)
%assign param_BlockInput_DutyCycle_Half_5 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_5)
%assign param_BlockInput_DutyCycle_Half_6 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_6)
%assign param_BlockInput_DutyCycle_Half_7 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_7)
%assign param_BlockInput_DutyCycle_Half_8 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_8)
%assign param_BlockInput_DutyCycle_Half_9 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_9)
%assign param_BlockInput_DutyCycle_Half_10 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_10)
%assign param_BlockInput_DutyCycle_Half_11 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_11)
%assign param_BlockInput_DutyCycle_Half_12 =  MchpVector64(block.RTWdata.param_BlockInput_DutyCycle_Half_12)
%assign IndexOutput = 0
%assign IndexInput = 0
%assign IndexVect = 0
%assign idxRef0 = -1
%foreach idx= SIZE(param_MaxPeriod_RAW,1)	
%if param_MaxPeriod_RAW[idx] != -1
%assign idxRef0 = idx
%endif
%endforeach
%assign param_BlockInput_xx = param_BlockInput_Period			
%foreach idx= SIZE(param_BlockInput_xx,1)	
%if param_BlockInput_xx[idx] != -1
%assign yConnected = LibBlockInputSignalConnected(IndexInput)
%switch param_BlockInput_VectorScalar		
%case 0	
%assign y = LibBlockInputSignal(IndexInput, "", "",0)					
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)
%assign IndexInput = IndexInput + 1							
%break
%case 1 
%assign y = LibBlockInputSignal(IndexInput, "", "",IndexVect)		
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)
%assign IndexVect = IndexVect + 1
%break
%endswitch
%assign yScale = yScaleFct(y,y_dtId,param_BlockInput_xx[idx],param_MaxPeriod_RAW[idx],param_MaxPeriod_ss[idx],0)
%if yConnected
PHASE%<idx+1> = %<yScale>;	/* Update PWM%<idx+1> Period */
%endif
%endif
%endforeach	
%assign IndexInput = IndexInput + (IndexVect != 0)
%assign IndexVect = 0
%assign param_BlockInput_xx = param_BlockInput_Period_ITB0			
%if param_BlockInput_xx != -1		
%assign yConnected = LibBlockInputSignalConnected(IndexInput)
%switch param_BlockInput_VectorScalar		
%case 0	
%assign y = LibBlockInputSignal(IndexInput, "", "",0)		
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)			
%assign IndexInput = IndexInput + 1		
%break
%case 1 
%assign y = LibBlockInputSignal(IndexInput, "", "",IndexVect)	
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)	
%assign IndexVect = IndexVect + 1
%break
%endswitch
%if g_MTBS == 0
%assign regTarget = "PTPER"
%else
%assign regTarget = "STPER"
%endif
%assign yScale = yScaleFct(y,y_dtId,param_BlockInput_xx,param_MaxPeriod_RAW[idxRef0],param_MaxPeriod_ss[idxRef0],0)
%if yConnected
%<regTarget> = %<yScale>;	/* Update PWM Period */
%endif
%endif	
%assign IndexInput = IndexInput + (IndexVect != 0)
%assign IndexVect = 0
%assign param_BlockInput_xx =param_BlockInput_DutyCycle
%foreach idx= SIZE(param_BlockInput_xx,1)	
%if param_BlockInput_xx[idx] != -1
%assign yConnected = LibBlockInputSignalConnected(IndexInput)
%switch param_BlockInput_VectorScalar						
%case 0	
%assign y = LibBlockInputSignal(IndexInput, "", "",0)			
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)		 				
%assign IndexInput = IndexInput + 1		
%break
%case 1 
%assign y = LibBlockInputSignal(IndexInput, "", "",IndexVect)		
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)
%assign IndexVect = IndexVect + 1
%break
%endswitch
%if yConnected
%if g_ECAM == 4	
%assign yScale = yScaleFct(y,y_dtId,param_BlockInput_xx[idx],param_MaxPeriod_RAW[idx],param_MaxPeriod_ss[idx],0)					
{
register unsigned int DC = %<yScale>;		
register unsigned int HalfDC = (DC >> 1);
PDC%<idx+1>  = HalfDC;					/* Update PWM Duty Cycle with enhanced resolution */
SDC%<idx+1>  = (DC - HalfDC) ;		/* Update PWM Duty Cycle with enhanced resolution */
}
%else
%assign yScale = yScaleFct(y,y_dtId,param_BlockInput_xx[idx],param_MaxPeriod_RAW[idx],param_MaxPeriod_ss[idx],0)									
PDC%<idx+1>  = %<yScale>;	/* Update PWM Duty Cycle */
%endif
%endif
%endif
%endforeach	
%assign IndexInput = IndexInput + (IndexVect != 0)
%assign IndexVect = 0
%assign param_BlockInput_xx = param_BlockInput_DutyCycle_Half
%foreach idx= SIZE(param_BlockInput_xx,1)	
%if param_BlockInput_xx[idx] != -1
%switch param_BlockInput_VectorScalar		
%case 0	
%assign y0Connected = LibBlockInputSignalConnected(IndexInput)					
%assign y0 = LibBlockInputSignal(IndexInput, "", "",0)		
%assign y0_dtId = LibBlockInputSignalDataTypeId(IndexInput)			
%assign IndexInput = IndexInput + 1							
%assign y1Connected = LibBlockInputSignalConnected(IndexInput)					
%assign y1 = LibBlockInputSignal(IndexInput, "", "",0)		
%assign y1_dtId = LibBlockInputSignalDataTypeId(IndexInput)			
%assign IndexInput = IndexInput + 1							
%break
%case 1 
%assign y0Connected = LibBlockInputSignalConnected(IndexInput)
%assign y1Connected = LibBlockInputSignalConnected(IndexInput)
%assign y0 = LibBlockInputSignal(IndexInput, "", "",0)							
%assign y0_dtId = LibBlockInputSignalDataTypeId(IndexInput)			
%assign y1 = LibBlockInputSignal(IndexInput, "", "",1)		
%assign y1_dtId = LibBlockInputSignalDataTypeId(IndexInput)			
%assign IndexInput = IndexInput + 1					
%break
%endswitch
%assign y0Scale = yScaleFct(y0,y0_dtId,param_BlockInput_xx[idx],param_MaxPeriod_RAW[idx],param_MaxPeriod_ss[idx],0) 			
%assign y1Scale = yScaleFct(y1,y1_dtId,param_BlockInput_xx[idx],param_MaxPeriod_RAW[idx],param_MaxPeriod_ss[idx],0) 			
%if y0Connected
PDC%<idx+1>  = %<y0Scale>;	/* Update PWM Duty Cycle */
%endif
%if y1Connected
SDC%<idx+1>  = %<y1Scale>;	/* Update PWM Duty Cycle */
%endif
%endif
%endforeach	
%assign IndexVect = 0
%assign param_BlockInput_xx = param_BlockInput_PhaseShift			
%foreach idx= SIZE(param_BlockInput_xx,1)	
%if param_BlockInput_xx[idx] != -1
%assign yConnected = LibBlockInputSignalConnected(IndexInput)
%switch param_BlockInput_VectorScalar		
%case 0	
%assign y = LibBlockInputSignal(IndexInput, "", "",0)		
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)						
%assign IndexInput = IndexInput + 1		
%break
%case 1 
%assign y = LibBlockInputSignal(IndexInput, "", "",IndexVect)		
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)						
%assign IndexVect = IndexVect + 1
%break
%endswitch
%assign yScale = yScaleFct(y,y_dtId,param_BlockInput_xx[idx],param_MaxPeriod_RAW[idx],param_MaxPeriod_ss[idx],0)
%if yConnected
PHASE%<idx+1> = %<yScale>;	/* Update PWM%<idx+1> Phase Shift */
%endif
%endif
%endforeach	
%assign IndexInput = IndexInput + (IndexVect != 0)
%assign IndexVect = 0
%assign param_BlockInput_xx = param_BlockInput_SEVTCMP			
%if param_BlockInput_xx != -1
%assign yConnected = LibBlockInputSignalConnected(IndexInput)			
%switch param_BlockInput_VectorScalar		
%case 0	
%assign y = LibBlockInputSignal(IndexInput, "", "",0)					
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)						
%assign IndexInput = IndexInput + 1		
%break
%case 1 
%assign y = LibBlockInputSignal(IndexInput, "", "",IndexVect)		
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)						
%assign IndexVect = IndexVect + 1
%break
%endswitch
%assign yScale = yScaleFct(y,y_dtId,param_BlockInput_xx,param_MaxPeriod_RAW[idxRef0],param_MaxPeriod_ss[idxRef0],0)
%if yConnected
%if g_MTBS == 0
SEVTCMP = %<yScale>;			/* Update PWM Primary Time base Trigger */
%else
SSEVTCMP = %<yScale>;		/* Update PWM Secondary Time base Trigger */
%endif
%endif
%endif
%assign IndexInput = IndexInput + (IndexVect != 0)
%assign IndexVect = 0		
%assign param_BlockInput_xx = param_BlockInput_TRIGx			
%foreach idx= SIZE(param_BlockInput_xx,1)	
%if param_BlockInput_xx[idx] != -1
%assign yConnected = LibBlockInputSignalConnected(IndexInput)			
%switch param_BlockInput_VectorScalar		
%case 0	
%assign y = LibBlockInputSignal(IndexInput, "", "",0)					
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)						
%assign IndexInput = IndexInput + 1		
%break
%case 1 
%assign y = LibBlockInputSignal(IndexInput, "", "",IndexVect)		
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)						
%assign IndexVect = IndexVect + 1
%break
%endswitch
%if g_ITB
%assign PeriodValue = "PHASE%<idx+1>"
%else
%if g_MTBS == 0
%assign PeriodValue = "PTPER"       
%else
%assign PeriodValue = "STPER"
%endif
%endif	
%if yConnected
%switch g_ECAM
%case 0	
%assign yScale = yScaleFct(y,y_dtId,param_BlockInput_xx[idx],param_MaxPeriod_RAW[idx]-1,param_MaxPeriod_ss[idx],0)
TRIG%<idx+1> = %<yScale>;	/* Update PWM%<idx+1> Trigger */
%break
%default	
%assign yScale = yScaleFct(y,y_dtId,param_BlockInput_xx[idx],param_MaxPeriod_RAW[idx]*2-2,param_MaxPeriod_ss[idx],0)
{
register unsigned int RawTrig = %<yScale>;	/* Trigger RAW value, might be within Decreasing or Increasing phase of the PWM Counter */
%if (param_BlockInput_Period_ITB0 != -1) || (param_BlockInput_Period[idx] != -1)
register unsigned int CurrentPeriod = %<PeriodValue>-1;
%assign CurrentPeriod = "CurrentPeriod"
%assign tmp = "CurrentPeriod"       
%else
register unsigned int tmp;
%assign CurrentPeriod = CAST("Number",param_InitPeriode[idx]-1)
%assign tmp = "tmp"
%endif
if (RawTrig < %<CurrentPeriod>)				
{				
TRIG%<idx+1> = %<CurrentPeriod> - RawTrig;	/* Update PWM%<idx+1> Trigger */
%<tmp> = TRGCON%<idx+1>;
%<tmp> |= %<MchpHex( 1U << 10)>;		/* Use temporary non volatile variable */
TRGCON%<idx+1> = %<tmp> & %<MchpHex(4294967295 - (1 << 11))>; 	/* Set Trigger for Decrementing phase (PTDIR = 1) */
} else
{
TRIG%<idx+1> = RawTrig - %<CurrentPeriod>;	/* Update PWM%<idx+1> Trigger */
%<tmp> = TRGCON%<idx+1>;
%<tmp> |= %<MchpHex( 1U << 11)>;		/* Use temporary non volatile variable */
TRGCON%<idx+1> = %<tmp> & %<MchpHex(4294967295 - (1 << 10))>; 	/* Set Trigger for Incrementing phase (PTDIR = 0) */
}
}
%endswitch
%endif
%endif
%endforeach	
%assign IndexInput = IndexInput + (IndexVect != 0)
%assign IndexVect = 0	
%assign param_BlockInput_xx = param_BlockInput_STRIGx			
%foreach idx= SIZE(param_BlockInput_xx,1)	
%if param_BlockInput_xx[idx] != -1
%assign yConnected = LibBlockInputSignalConnected(IndexInput)
%switch param_BlockInput_VectorScalar		
%case 0	
%assign y = LibBlockInputSignal(IndexInput, "", "",0)		
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)									
%assign IndexInput = IndexInput + 1		
%break
%case 1 
%assign y = LibBlockInputSignal(IndexInput, "", "",IndexVect)		
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)						
%assign IndexVect = IndexVect + 1
%break
%endswitch
%if g_ITB
%assign PeriodValue = "PHASE%<idx+1>"
%else
%if g_MTBS == 0
%assign PeriodValue = "PTPER"
%else
%assign PeriodValue = "STPER"
%endif
%endif	
%if yConnected
%switch g_ECAM
%case 0	
%assign yScale = yScaleFct(y,y_dtId,param_BlockInput_xx[idx],param_MaxPeriod_RAW[idx]-1,param_MaxPeriod_ss[idx],0)
STRIG%<idx+1> = %<yScale>;	/* Update PWM%<idx+1> Trigger */
%break
%default	
%assign yScale = yScaleFct(y,y_dtId,param_BlockInput_xx[idx],param_MaxPeriod_RAW[idx]*2-2,param_MaxPeriod_ss[idx],0)
{
register unsigned int RawTrig = %<yScale>;  /* Trigger RAW value, might be within Decreasing or Increasing phase of the PWM Counter */
%if (param_BlockInput_Period_ITB0 != -1) || (param_BlockInput_Period[idx] != -1)
register unsigned int CurrentPeriod = %<PeriodValue>-1;
%assign CurrentPeriod = "CurrentPeriod"
%assign tmp = "CurrentPeriod"       
%else
register unsigned int tmp;
%assign CurrentPeriod = CAST("Number",param_InitPeriode[idx]-1)
%assign tmp = "tmp"
%endif
if (RawTrig < %<CurrentPeriod>)
{
STRIG%<idx+1> = %<CurrentPeriod> - RawTrig;  /* Update PWM%<idx+1> Trigger */
%<tmp> = TRGCON%<idx+1>;
%<tmp> |= %<MchpHex( 1U << 8)>;      /* Use temporary non volatile variable */
TRGCON%<idx+1> = %<tmp> & %<MchpHex(4294967295 - (1 << 9))>;   /* Set Trigger for Decrementing phase (PTDIR = 1) */
} else
{
STRIG%<idx+1> = RawTrig - %<CurrentPeriod>;  /* Update PWM%<idx+1> Trigger */
%<tmp> = TRGCON%<idx+1>;
%<tmp> |= %<MchpHex( 1U << 9)>;      /* Use temporary non volatile variable */
TRGCON%<idx+1> = %<tmp> & %<MchpHex(4294967295 - (1 << 8))>;   /* Set Trigger for Incrementing phase (PTDIR = 0) */
}
}
%endswitch
%endif
%endif
%endforeach	
%assign IndexInput = IndexInput + (IndexVect != 0)
%assign IndexVect = 0	
%assign param_BlockInput_xx = param_BlockInput_DeadTime			
%foreach idx= SIZE(param_BlockInput_xx,1)	
%if param_BlockInput_xx[idx] != -1
%assign yConnected = LibBlockInputSignalConnected(IndexInput)			
%switch param_BlockInput_VectorScalar		
%case 0	
%assign y = LibBlockInputSignal(IndexInput, "", "",0)
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)											
%assign IndexInput = IndexInput + 1		
%break
%case 1 
%assign y = LibBlockInputSignal(IndexInput, "", "",IndexVect)		
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)						
%assign IndexVect = IndexVect + 1
%break
%endswitch
%if yConnected
%assign yScale = yScaleFct(y,y_dtId,param_BlockInput_xx[idx],param_MaxPeriod_RAW[idx],param_MaxPeriod_ss[idx],0)
DTR%<idx+1> = %<yScale>;	/* Update PWM%<idx+1> Dead Time */
%endif
%endif
%endforeach	
%assign IndexInput = IndexInput + (IndexVect != 0)
%assign IndexVect = 0	
%assign param_BlockInput_xx = param_BlockInput_DeadTimeAlt			
%foreach idx= SIZE(param_BlockInput_xx,1)	
%if param_BlockInput_xx[idx] != -1
%assign yConnected = LibBlockInputSignalConnected(IndexInput)			
%switch param_BlockInput_VectorScalar		
%case 0	
%assign y = LibBlockInputSignal(IndexInput, "", "",0)					
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)						
%assign IndexInput = IndexInput + 1		
%break
%case 1 
%assign y = LibBlockInputSignal(IndexInput, "", "",IndexVect)		
%assign y_dtId = LibBlockInputSignalDataTypeId(IndexInput)						
%assign IndexVect = IndexVect + 1
%break
%endswitch
%assign yScale = yScaleFct(y,y_dtId,param_BlockInput_xx[idx],param_MaxPeriod_RAW[idx],param_MaxPeriod_ss[idx],0)
%if yConnected
ALTDTR%<idx+1> = %<yScale>;	/* Update PWM%<idx+1> Alt Dead Time */
%endif
%endif
%endforeach	
%assign IndexInput = IndexInput + (IndexVect != 0)
%assign IndexVect = 0		
%if g_FLTMOD == 0    
%assign y = LibBlockInputSignal(IndexInput, "", "",0)
%assign IndexInput = IndexInput + 1
%if LibBlockInputSignalConnected(IndexInput-1)
%if g_FLT_PIN_Pol == 1
if ((1U == PWMCON%<CAST("Number",g_ChOn[0])>bits.FLTSTAT) && (0U != %<y>) && (0U == PORT%<g_FLT_PIN_Letter>bits.R%<g_FLT_PIN_Letter>%<g_FLT_PIN_Num>) )
%else
if ((1U == PWMCON%<CAST("Number",g_ChOn[0])>bits.FLTSTAT) && (0U != %<y>) && (0U != PORT%<g_FLT_PIN_Letter>bits.R%<g_FLT_PIN_Letter>%<g_FLT_PIN_Num>) )
%endif
{
PTCONbits.PTEN = 0;            	
PTCONbits.PTEN = 1;
}
%endif
%endif
%if g_FLT_BlockOutput == 1
%assign u = LibBlockOutputSignal(IndexOutput, "", "", 0)
%assign IndexOutput = IndexOutput + 1
%if LibBlockOutputSignalConnected(IndexOutput-1)
%<u> = PWMCON%<CAST("Number",g_ChOn[0])>bits.FLTSTAT;	/* Read Fault State */
%endif
%endif
%endfunction
%function Update(block, system) Output
%endfunction
%function MCHP_MAX0(val) void
%if val < 0
%return CAST("Number",0)
%else
%return CAST("Number",val)
%endif
%endfunction	
%function yScaleFct(y,y_dtId,param_BlockInput_xx,param_MaxPeriod_RAW,param_MaxPeriod_ss,Rshift) void
%switch y_dtId
%case 0
%assign y_CAST = "Real"		
%break
%case 1
%assign y_CAST = "Real32"	
%break
%endswitch 		
%switch Rshift
%case 0
%assign RshiftMult = 1
%break
%default
%assign RshiftMult = 1.0/(1 << Rshift)
%break
%endswitch
%switch param_BlockInput_xx
%case 1		
%if Rshift > 0
%assign yScale = "(%<y> >> %<Rshift>)"
%else
%assign yScale = y
%endif
%break
%case 10	
%assign yScale = "((unsigned int)( %<y>  *  %< CAST(y_CAST, param_MaxPeriod_RAW * RshiftMult) >  ))"
%break
%case 11	
%assign yScale = "((unsigned int)( %<y>  *  %< CAST(y_CAST, 0.5*param_MaxPeriod_RAW * RshiftMult) >  +  %< CAST(y_CAST, 0.5*param_MaxPeriod_RAW*RshiftMult) >  ))"
%break
%case 12	
%assign yScale = "((unsigned int)( %<y>  *  %< CAST(y_CAST, param_MaxPeriod_RAW*RshiftMult/param_MaxPeriod_ss) >  ))"
%break
%endswitch
%return yScale
%endfunction
