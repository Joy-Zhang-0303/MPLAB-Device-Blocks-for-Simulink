%implements  MCHP_OC_SW  "C"
%include "MCHP_Functions.tlc"
%function BlockInstanceSetup(block, system) void
%assign Channels =  MchpVector(block.RTWdata.Channels)
%foreach idx = SIZE(Channels,1)
%<HARMONY_RegisterPeripheral("OC",Channels[idx],block)>	
%endforeach
%endfunction
%function Start(block, system) Output
%assign IntPriority = CAST("Number",block.RTWdata.IntPriority)
%assign OCtype = CAST("Number",block.RTWdata.OCtype)
%assign PeriodIsBlockInput = CAST("Number",block.RTWdata.PeriodIsBlockInput)
%assign Channels = MchpVector(block.RTWdata.Channels)
%assign RefTimers = MchpVector(block.RTWdata.RefTimers)
%assign RefTimersMax = MchpVector(block.RTWdata.RefTimersMax)
%assign Channel_UP_Down_Periode = MchpVector(block.RTWdata.Channel_UP_Down_Periode)
%assign OCxCON1 = MchpVector(block.RTWdata.OCxCON1)
%assign OCxCON2 = MchpVector(block.RTWdata.OCxCON2)
%if OCtype == 1
%assign OCTypeRef = "1"
%else
%assign OCTypeRef = ""
%endif
%if OCtype == 1	
%foreach idx = SIZE(Channels,1)
%if OCxCON1[idx] == -1
%continue
%endif
OC%<Channels[idx]>CON1 = %<MchpHex(OCxCON1[idx])>;
%if %<OCxCON2[idx]> != -1
OC%<Channels[idx]>CON2 = %<MchpHex(OCxCON2[idx])>;
%endif
%endforeach
%else 
%foreach idx = SIZE(Channels,1)
%if OCxCON1[idx] == -1
%continue
%endif
OC%<Channels[idx]>CON%<OCTypeRef> = %<MchpHex(OCxCON1[idx])>;
%endforeach
%endif
/* Set-up Output Capture Interruption */
%foreach idx = SIZE(Channels,1)
%if OCxCON1[idx] == -1
%continue
%endif
%<MCHP_SFR( "OC%<Channels[idx]>IF" , 0 , "Clear interrupt Flag" )>
%<MCHP_SFR( "OC%<Channels[idx]>IP" , IntPriority , "Set interrupt Priority" )>
%<MCHP_SFR( "OC%<Channels[idx]>IE" , 1 , "Enable Interrupt" )>
%endforeach
%assign ChipIdN =  CAST("String",RTWGenSettings.ChipIdN)
%assign ChipIdN = FEVAL("str2num",ChipIdN)
%assign ChipIdN = FEVAL("int32",ChipIdN)		
%openfile dspicfun = "MCHP_OC%<Channels[0]>_Interrupt.c"
#include "%<LibGetMdlPubHdrBaseName()>.h"
#include "%<LibGetMdlPubHdrBaseName()>_private.h"
/* Output Compare - Interrupt: %<Name> */
%foreach idx = SIZE(Channels,1)
%if OCxCON1[idx] == -1
%continue
%endif
%if ((Channel_UP_Down_Periode[idx] & 1) != 0)        
volatile uint16_T MCHP_oc%<Channels[idx]>up;
%endif
%if ((Channel_UP_Down_Periode[idx] & 2) != 0)        
volatile uint16_T MCHP_oc%<Channels[idx]>down;
%endif
%if ((Channel_UP_Down_Periode[idx] & 32) != 0)        
volatile uint16_T MCHP_oc%<Channels[idx]>toggle;
%endif
%if ((Channel_UP_Down_Periode[idx] & 12) != 0)
%if (PeriodIsBlockInput == 1)       
volatile uint16_T MCHP_oc%<Channels[idx]>Periode;
%endif
%endif
%endforeach
/* Implement Output Compare Interrupts if required */
%if ::isPIC32	
%assign Mask16Bit = CAST("String","& 0xFFFF")
%else
%assign Mask16Bit = CAST("String","")
%endif
%foreach idx = SIZE(Channels,1)
%if OCxCON1[idx] == -1
%continue
%endif
%if ::isPIC32	
%<Mchp_Interrupt32(IntPriority,1,0,"OUTPUT_COMPARE_%<Channels[idx]>_VECTOR",block)>  
%else
%<Mchp_Interrupt16(IntPriority,Mchp_No_auto_psv(),"OC%<Channels[idx]>Interrupt",block)> 			
%endif
{
%<MCHP_SFR( "OC%<Channels[idx]>IF" , 0 , "Clear Interrupt flag" )>
%<MCHP_ProfileMCU("enter")>
%if (PeriodIsBlockInput == 1)
%assign PERIOD = "MCHP_oc%<Channels[idx]>Periode"
%else
%assign PERIOD = %<RefTimersMax[idx]>
%endif
%if (Channel_UP_Down_Periode[idx] == 3)	
OC%<Channels[idx]>R =  (OC%<Channels[idx]>RS + MCHP_oc%<Channels[idx]>down) %<Mask16Bit>;      
OC%<Channels[idx]>RS = (OC%<Channels[idx]>R + MCHP_oc%<Channels[idx]>up) %<Mask16Bit>;
%endif
%if (Channel_UP_Down_Periode[idx] == 5 )
OC%<Channels[idx]>R =  (OC%<Channels[idx]>R + %<PERIOD>) %<Mask16Bit>;	
OC%<Channels[idx]>RS = (OC%<Channels[idx]>R + MCHP_oc%<Channels[idx]>up) %<Mask16Bit>;
%endif
%if (Channel_UP_Down_Periode[idx] == 10)
OC%<Channels[idx]>R =  (OC%<Channels[idx]>RS + MCHP_oc%<Channels[idx]>down) %<Mask16Bit>;
OC%<Channels[idx]>RS = (OC%<Channels[idx]>RS + %<PERIOD>) %<Mask16Bit>;		
%endif
%if (Channel_UP_Down_Periode[idx] == 32)
OC%<Channels[idx]>R =  (OC%<Channels[idx]>R + MCHP_oc%<Channels[idx]>toggle) %<Mask16Bit>;
%endif
%<MCHP_ProfileMCU("exitUpdate")>
}
%endforeach
%openfile buffer
%foreach idx = SIZE(Channels,1)
%if OCxCON1[idx] == -1
%continue
%endif
%if ((Channel_UP_Down_Periode[idx] & 1) != 0)        
extern volatile uint16_T MCHP_oc%<Channels[idx]>up;
%endif
%if ((Channel_UP_Down_Periode[idx] & 2) != 0)        
extern volatile uint16_T MCHP_oc%<Channels[idx]>down;
%endif
%if ((Channel_UP_Down_Periode[idx] & 32) != 0)        
extern volatile uint16_T MCHP_oc%<Channels[idx]>toggle;
%endif
%if ((Channel_UP_Down_Periode[idx] & 12) != 0)
%if (PeriodIsBlockInput == 1)        
extern volatile uint16_T MCHP_oc%<Channels[idx]>Periode;
%endif
%endif
%endforeach
%closefile buffer
%<LibCacheFunctionPrototype(buffer)>
%closefile dspicfun
%if LibBlockSampleTime(block) == -2		
%<Update(block, system)>
%endif
%endfunction
%function Update(block, system) Output
/* S-Function "dsPIC_PWM_OC" Block: %<Name> */
%assign OCtype = CAST("Number",block.RTWdata.OCtype)
%assign PeriodIsBlockInput = CAST("Number",block.RTWdata.PeriodIsBlockInput)
%assign Channels = MchpVector(block.RTWdata.Channels)
%assign Channel_UP_Down_Periode = MchpVector(block.RTWdata.Channel_UP_Down_Periode)
%assign OCxCON1 = MchpVector(block.RTWdata.OCxCON1)
%assign PortRef = MchpVector(block.RTWdata.PortRef)
%assign RefTimers = MchpVector(block.RTWdata.RefTimers)
%assign RefTimersMax = MchpVector(block.RTWdata.RefTimersMax)
%if OCtype == 1
%assign OCTypeRef = "1"
%else
%assign OCTypeRef = ""
%endif
%assign portIn = 0
%foreach idx = SIZE(Channels,1)
%if OCxCON1[idx] == -1
%continue
%endif
%if ((Channel_UP_Down_Periode[idx] & 1) != 0)        
%assign up = LibBlockInputSignal(portIn, "", "", 1)
%assign portIn = portIn+1
%endif
%if ((Channel_UP_Down_Periode[idx] & 2) != 0)        
%assign down = LibBlockInputSignal(portIn, "", "", 1)
%assign portIn = portIn+1
%endif
%if ((Channel_UP_Down_Periode[idx] & 32) != 0)        
%assign toggle = LibBlockInputSignal(portIn, "", "", 1)
%assign portIn = portIn+1
%endif
%if ((Channel_UP_Down_Periode[idx] & 12) != 0)	
%if PeriodIsBlockInput == 1
%assign period = LibBlockInputSignal(portIn, "", "", 1)
%assign portIn = portIn+1
%else
%assign period = %<RefTimersMax[idx]>
%endif
%endif
%if ((Channel_UP_Down_Periode[idx] & 3) != 3)        
%if ((Channel_UP_Down_Periode[idx] & 1) != 0)        
if (%<up> == 0)
{
%<MCHP_SFR( "OC%<Channels[idx]>IE" , 0 , "Remove interrupt" )>
OC%<Channels[idx]>CON%<OCTypeRef> = %<MchpHex(OCxCON1[idx] & (65535-7))>;	/* turn off OC */
%<MCHP_SetOutputBit(PortRef[idx],0,"")>
}
%if ((Channel_UP_Down_Periode[idx] & 12) != 0)	
else if (%<up> >= %<period>)	/*	If up time is greater than period */
%else
else if (%<up> >= %<Channel_UP_Down_Periode[idx]>)	/*	If up time is greater than period */
%endif
{
%<MCHP_SFR( "OC%<Channels[idx]>IE" , 0 , "Remove interrupt" )>
OC%<Channels[idx]>CON%<OCTypeRef> = %<MchpHex(OCxCON1[idx] & (65535-7))>;	/* turn off OC */					
%<MCHP_SetOutputBit(PortRef[idx],1,"")>
}
else
{
MCHP_oc%<Channels[idx]>up = %<up>;
%if ((Channel_UP_Down_Periode[idx] & 12) != 0) && (PeriodIsBlockInput == 1) 	
MCHP_oc%<Channels[idx]>Periode = %<period>;
%endif
if (%< MCHP_SFR_direct("OC%<Channels[idx]>IE")> == 0)
{
OC%<Channels[idx]>CON%<OCTypeRef> = %<MchpHex(OCxCON1[idx])>;	/* turn on OC */
%<MCHP_SFR( "OC%<Channels[idx]>IE" , 1 , "Enable interrupt" )>
}
}
%elseif ((Channel_UP_Down_Periode[idx] & 2) != 0)        
if (%<down> == 0)
{
%<MCHP_SFR( "OC%<Channels[idx]>IE" , 0 , "Disable interrupt" )>
OC%<Channels[idx]>CON%<OCTypeRef> = %<MchpHex(OCxCON1[idx] & (65535-7))>;	/* turn off OC */
%<MCHP_SetOutputBit(PortRef[idx],1,"")>					
}
%if ((Channel_UP_Down_Periode[idx] & 12) != 0)	
else if (%<down> >= %<period>)	/*	If up time is greater than period */
%else
else if (%<down> >= %<Channel_UP_Down_Periode[idx]>)	/*	If up time is greater than period */
%endif
{
%<MCHP_SFR( "OC%<Channels[idx]>IE" , 0 , "Disable interrupt" )>
OC%<Channels[idx]>CON%<OCTypeRef> = %<MchpHex(OCxCON1[idx] & (65535-7))>;	/* turn off OC */
LAT%<L>bits.LAT%<L>%<PortPin[idx]> = 0;
}
else
{
MCHP_oc%<Channels[idx]>down = %<down>;
%if ((Channel_UP_Down_Periode[idx] & 12) != 0) && (PeriodIsBlockInput == 1)
MCHP_oc%<Channels[idx]>Periode = %<period>;
%endif
if (%< MCHP_SFR_direct("OC%<Channels[idx]>IE")> == 0)
{
OC%<Channels[idx]>CON%<OCTypeRef> = %<MchpHex(OCxCON1[idx])>;	/* turn on OC */
%<MCHP_SFR( "OC%<Channels[idx]>IE" , 1 , "Enable interrupt" )>
}
}
%elseif (Channel_UP_Down_Periode[idx] == 32) 			
%if (RefTimersMax[idx] <= 65535)
if ( (%<toggle> == 0) || (%<toggle> > %<RefTimersMax[idx]>) )
%else
if (%<toggle> == 0)
%endif
{
%<MCHP_SFR( "OC%<Channels[idx]>IE" , 0 , "Disable interrupt" )>
OC%<Channels[idx]>CON%<OCTypeRef> = %<MchpHex(OCxCON1[idx] & (65535-7))>;	/* turn off OC, output might be overrided with a digital output */
}
else
{
MCHP_oc%<Channels[idx]>toggle = %<toggle>;
if (%< MCHP_SFR_direct("OC%<Channels[idx]>IE")> == 0)
{
OC%<Channels[idx]>CON%<OCTypeRef> = %<MchpHex(OCxCON1[idx])>;	/* turn on OC */
%if (OCtype == 0) || (OCtype == 2) 	
OC%<Channels[idx]>R = TMR%<RefTimers[idx]>;
%else
OC%<Channels[idx]>R = OC%<Channels[idx]>TMR;	
%endif
%<MCHP_SFR( "OC%<Channels[idx]>IF" , 1 , "Enable interrupt Flag" )>
%<MCHP_SFR( "OC%<Channels[idx]>IE" , 1 , "Enable interrupt" )>
}
}
%endif
%else 
MCHP_oc%<Channels[idx]>up = %<up>;
MCHP_oc%<Channels[idx]>down = %<down>;
%endif
%endforeach
%endfunction
%function Outputs(block, system) Output
%endfunction
