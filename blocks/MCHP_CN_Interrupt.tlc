
%include "MCHP_Functions.tlc"
%function MCHP_CN_Interrupt(block,IL) void
%assign IntPriority = CAST("Number",block.RTWdata.IntPriority)
%assign CNtype = CAST("Number",block.RTWdata.CNtype)
%assign nTIMERS = CAST("Number",RTWGenSettings.nTIMERS)
%assign nSCCP = CAST("Number",RTWGenSettings.nSCCP)
%assign NTIMERS = nTIMERS + nSCCP
%if ISEQUAL(IL,"Z") 
%assign filename = "MCHP_CN_Interrupt.c"		
%assign Channels = 		::CompiledModel.MCHP.MCHP_CN.Channels
%assign PortL = 		::CompiledModel.MCHP.MCHP_CN.PortL
%assign PortN = 		::CompiledModel.MCHP.MCHP_CN.PortN
%assign RefTimers = 		::CompiledModel.MCHP.MCHP_CN.RefTimers
%assign Channel_UP_Down_Periode = 		::CompiledModel.MCHP.MCHP_CN.Channel_UP_Down_Periode
%assign ChangeDetected = 		::CompiledModel.MCHP.MCHP_CN.ChangeDetected
%assign OutputPortValue = 		::CompiledModel.MCHP.MCHP_CN.OutputPortValue
%else
%assign filename = "MCHP_CN%<IL>_Interrupt.c" 	
%assign G_Channels = 		::CompiledModel.MCHP.MCHP_CN.Channels
%assign G_PortL = 		::CompiledModel.MCHP.MCHP_CN.PortL
%assign G_PortN = 		::CompiledModel.MCHP.MCHP_CN.PortN
%assign G_RefTimers = 		::CompiledModel.MCHP.MCHP_CN.RefTimers
%assign G_Channel_UP_Down_Periode = 		::CompiledModel.MCHP.MCHP_CN.Channel_UP_Down_Periode
%assign G_ChangeDetected = 		::CompiledModel.MCHP.MCHP_CN.ChangeDetected
%assign G_OutputPortValue = 		::CompiledModel.MCHP.MCHP_CN.OutputPortValue
%assign Channels = []
%assign PortL = []
%assign PortN = []
%assign RefTimers = []
%assign Channel_UP_Down_Periode = []
%assign ChangeDetected = []
%assign OutputPortValue = []
%foreach idx=SIZE(G_Channels,1)				
%assign Ii = CAST("Vector",[%<G_PortL[idx]>])
%assign IiL = STRINGOF(Ii)		
%if ISEQUAL(IiL,IL)
%assign Channels = Channels + G_Channels[idx]
%assign PortL = PortL + G_PortL[idx]
%assign PortN = PortN + G_PortN[idx]
%assign RefTimers = RefTimers + G_RefTimers[idx]
%assign Channel_UP_Down_Periode = Channel_UP_Down_Periode + G_Channel_UP_Down_Periode[idx]
%assign ChangeDetected = ChangeDetected + G_ChangeDetected[idx]
%assign OutputPortValue = OutputPortValue + G_OutputPortValue[idx]
%endif
%endforeach
%endif
%openfile dspCNfun = filename
#include "%<LibGetMdlPubHdrBaseName()>.h"
#include "%<LibGetMdlPubHdrBaseName()>_private.h"
/* CN - Interrupt: %<Name> */
%foreach idx = SIZE(Channels,1)
%if ((Channel_UP_Down_Periode[idx] & 1) != 0)        
volatile uint16_T CN%<Channels[idx]>_up;
%endif
%if ((Channel_UP_Down_Periode[idx] & 2) != 0)        
volatile uint16_T CN%<Channels[idx]>_down;
%endif
%if ((Channel_UP_Down_Periode[idx] & 4) != 0)        
volatile uint16_T CN%<Channels[idx]>_RisingPeriode;
%endif
%if ((Channel_UP_Down_Periode[idx] & 8) != 0)        
volatile uint16_T CN%<Channels[idx]>_FallingPeriode;
%endif
%if (ChangeDetected[idx] != 0)
volatile uint16_T CN%<Channels[idx]>_ChangeDetectedFlag;
%endif
%endforeach
%foreach Port = 11		
%foreach idx=SIZE(Channels,1)
%assign PortLString = STRINGOF([%<PortL[idx]>])
%if ( (PortL[idx] == (Port + 65-1) ) && ( (Channel_UP_Down_Periode[idx] != 0)  ||  (ChangeDetected[idx] != 0)  || (OutputPortValue[idx] != 0) ) )			
uint_T volatile port%<PortLString>_Copy;
%break
%endif
%endforeach
%endforeach
/* Implement Change Notification Interrupt */
%if ( (ISFIELD(::CompiledModel.MCHP,"MCHP_CNIE")) &&  (!ISFIELD(::CompiledModel.MCHP,"MCHP_CNIE_GENERATED")) )
%assign	AUTO_PSV = "__auto_psv__"	
%assign fpusave = 1
%else
%assign AUTO_PSV = Mchp_No_auto_psv()	
%assign fpusave = 0
%endif
%if ::isPIC32	
%<Mchp_Interrupt32(IntPriority,1,fpusave,"CHANGE_NOTICE_%<IL>_VECTOR",block)>  
%else
%if ISEQUAL(IL,"Z") 
%<Mchp_Interrupt16(IntPriority,AUTO_PSV,"CNInterrupt",block)> 			
%else 
%<Mchp_Interrupt16(IntPriority,AUTO_PSV,"CN%<IL>Interrupt",block)> 			
%endif
%endif
{
/* Declaration of Variables */
%foreach idx=SIZE(Channels,1)
%if (Channel_UP_Down_Periode[idx] != 0)	
static uint16_T TimerCN%<Channels[idx]>_Old;
%endif
%endforeach
%foreach Port = 11		
%foreach idx=SIZE(Channels,1)   			
%if PortL[idx] == (Port + 65-1)  && ( (Channel_UP_Down_Periode[idx] != 0)  ||  (ChangeDetected[idx] != 0)  || (OutputPortValue[idx] != 0) )	   			
%assign PortLString = STRINGOF([%<PortL[idx]>])
uint_T port%<PortLString>_Xor ;
%break
%endif
%endforeach
%endforeach
%foreach iTimer = NTIMERS
%foreach idx=SIZE(Channels,1)
%if (iTimer+1) == RefTimers[idx]
uint16_T Timer%<(iTimer+1)>;
%break
%endif
%endforeach
%endforeach
%<MCHP_ProfileMCU("enter")>
/* Take a snapshoot of Timers & Ports if required */
%foreach iTimer = NTIMERS
%foreach idx=SIZE(Channels,1)
%if (iTimer+1) == RefTimers[idx]	
%if iTimer < nTIMERS 
%assign idxT = iTimer+1
%assign TimerName = "TIMER %<idxT>"
%assign intPrefix = "T"
%assign TMRx = "TMR%<idxT>"
%else 
%assign idxT = iTimer+1 - nTIMERS
%assign TimerName = "CCP TIMER %<idxT>"
%assign intPrefix = "CCP"
%assign TMRx = "CCP%<idxT>TMRL"
%endif
Timer%<iTimer+1> = %<TMRx>;	/* Read %<TimerName> */
%break
%endif
%endforeach
%endforeach
%switch CNtype
%case 0 	
%case 1 	
%<MCHP_SFR( "CNIF" , 0 , "Clear CN interrupt Flag" )>
%break   	
%case 2 	
%<MCHP_SFR( "CN%<PortLString>IF" , 0 , "Clear CN Port %<PortLString> interrupt Flag" )>
%break
%endswitch
%foreach Port = 11	
%foreach idx=SIZE(Channels,1)
%if PortL[idx] == (Port + 65-1) && ((Channel_UP_Down_Periode[idx] != 0)  ||  (ChangeDetected[idx] != 0)  || (OutputPortValue[idx] != 0) )
%assign PortLString = STRINGOF([%<PortL[idx]>])
port%<PortLString>_Xor = PORT%<PortLString>; /* Temporary port copy, access only once to PORT%<PortLString> to avoid any inconsistancy */
%break
%endif
%endforeach
%endforeach
/* Then compute (if required)... */
%foreach Port = 11	
%foreach idx=SIZE(Channels,1)
%if PortL[idx] == (Port + 65-1) && ((Channel_UP_Down_Periode[idx] != 0)  ||  (ChangeDetected[idx] != 0)  || (OutputPortValue[idx] != 0) )
%assign PortLString = STRINGOF([%<PortL[idx]>])
port%<PortLString>_Xor = port%<PortLString>_Xor ^ port%<PortLString>_Copy; 	/* Notify Changes */
port%<PortLString>_Copy = port%<PortLString>_Copy ^ port%<PortLString>_Xor; /* Update port Copy */	
%break
%endif
%endforeach
%endforeach
%foreach idx=SIZE(Channels,1)
%if ((Channel_UP_Down_Periode[idx] != 0)  ||  (ChangeDetected[idx] != 0)  )
%assign PortLString = STRINGOF([%<PortL[idx]>])
/* Change Notification on Port %<PortLString>%<PortN[idx]>*/
if (port%<PortLString>_Xor & %< 1U << PortN[idx] >)
{
%if ((Channel_UP_Down_Periode[idx] & (1+2)) != 0)        
if (port%<PortLString>_Copy & %< 1U << PortN[idx] >) /* rising edge */
{
%if ((Channel_UP_Down_Periode[idx] & 2) != 0)        
CN%<Channels[idx]>_down = Timer%<RefTimers[idx]>  - TimerCN%<Channels[idx]>_Old;
%endif
%if (Channel_UP_Down_Periode[idx] == 5)
CN%<Channels[idx]>_RisingPeriode =  Timer%<RefTimers[idx]> - TimerCN%<Channels[idx]>_Old;
TimerCN%<Channels[idx]>_Old = Timer%<RefTimers[idx]>;		
%endif
%if (ChangeDetected[idx]& 1)
CN%<Channels[idx]>_ChangeDetectedFlag++;
%endif
}
else 			/* falling edge */
{
%if ((Channel_UP_Down_Periode[idx] & 1) != 0)        
CN%<Channels[idx]>_up =  Timer%<RefTimers[idx]> - TimerCN%<Channels[idx]>_Old;
%endif
%if (Channel_UP_Down_Periode[idx] == 10)
CN%<Channels[idx]>_FallingPeriode =  Timer%<RefTimers[idx]> - TimerCN%<Channels[idx]>_Old;
TimerCN%<Channels[idx]>_Old = Timer%<RefTimers[idx]>;		
%endif
%if (ChangeDetected[idx]& 2)
CN%<Channels[idx]>_ChangeDetectedFlag++;
%endif
}
%if ((Channel_UP_Down_Periode[idx] != 5) && (Channel_UP_Down_Periode[idx] != 10))
%if (Channel_UP_Down_Periode[idx] != 0)	
TimerCN%<Channels[idx]>_Old = Timer%<RefTimers[idx]>;
%endif
%endif
%else 
%if ((Channel_UP_Down_Periode[idx] & 4) != 0)
if  (port%<PortLString>_Copy & %< 1U << PortN[idx] >)   /* rising edge */
{
CN%<Channels[idx]>_RisingPeriode = Timer%<RefTimers[idx]> - TimerCN%<Channels[idx]>_Old;
TimerCN%<Channels[idx]>_Old = Timer%<RefTimers[idx]>;		
%if (ChangeDetected[idx]& 1)
CN%<Channels[idx]>_ChangeDetectedFlag++;
%endif
}
%if (ChangeDetected[idx]& 2)
else CN%<Channels[idx]>_ChangeDetectedFlag++;
%endif
%endif
%if ((Channel_UP_Down_Periode[idx] & 8) != 0)
if  (port%<PortLString>_Copy & %< 1U << PortN[idx] >)   /* falling edge */
{
CN%<Channels[idx]>_RisingPeriode = Timer%<RefTimers[idx]> - TimerCN%<Channels[idx]>_Old;
TimerCN%<Channels[idx]>_Old = Timer%<RefTimers[idx]>;		
%if (ChangeDetected[idx]& 2)
CN%<Channels[idx]>_ChangeDetectedFlag++;
%endif
}
%if (ChangeDetected[idx]& 1)
else CN%<Channels[idx]>_ChangeDetectedFlag++;
%endif
%endif
%endif
%if (Channel_UP_Down_Periode[idx]  == 0)
%if (ChangeDetected[idx]& 1)
if  (port%<PortLString>_Copy & %< 1U << PortN[idx] >)   /* rising edge */
CN%<Channels[idx]>_ChangeDetectedFlag++;		
%endif
%if (ChangeDetected[idx]& 2)
if  ((port%<PortLString>_Copy & %< 1U << PortN[idx] >)==0)   /* rising edge */
CN%<Channels[idx]>_ChangeDetectedFlag++;		
%endif
%if (ChangeDetected[idx]== 3)
CN%<Channels[idx]>_ChangeDetectedFlag++;		
%endif
%endif
} 
%endif
%endforeach
%if ( (ISFIELD(::CompiledModel.MCHP,"MCHP_CNIE")) &&  (!ISFIELD(::CompiledModel.MCHP,"MCHP_CNIE_GENERATED")) )
/* Implement Change Notification Interruption User Code */
%with(::CompiledModel.MCHP.MCHP_CNIE)
%foreach callIdx = NumSFcnSysOutputCalls		
%if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall, "unconnected")
%continue
%endif
%<LibBlockExecuteFcnCall(::CompiledModel.MCHP.MCHP_CNIE,callIdx)>
%addtorecord ::CompiledModel.MCHP MCHP_CNIE_GENERATED 1
%endforeach
%endwith
/* End of Change Notification Interruption User Code */
%endif
%assign MCHP_CNxIE = "MCHP_CN%<PortLString>IE"
%assign MCHP_CNxIE_GENERATED = "MCHP_CN%<PortLString>IE_GENERATED"
%if ( (ISFIELD(::CompiledModel.MCHP,"%<MCHP_CNxIE>")) &&  (!ISFIELD(::CompiledModel.MCHP,"%<MCHP_CNxIE_GENERATED>")) )
/* Implement Change Notification Interruption User Code */
%with(::CompiledModel.MCHP.%<MCHP_CNxIE>)
%foreach callIdx = NumSFcnSysOutputCalls		
%if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall, "unconnected")
%continue
%endif
%assign FieldV = ::CompiledModel.MCHP.%<MCHP_CNxIE>
%<LibBlockExecuteFcnCall(FieldV,callIdx)>
%assign FieldN = "MCHP_CN%<PortLString>IE_GENERATED"
%addtorecord ::CompiledModel.MCHP %<FieldN> 1
%endforeach
%endwith
/* End of Change Notification Interruption User Code */
%endif	
%<MCHP_ProfileMCU("exitUpdate")>
}
%closefile dspCNfun
%endfunction
