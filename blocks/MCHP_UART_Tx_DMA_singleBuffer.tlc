
%function MCHP_UART_Tx_DMA_singleBuffer(block,system) Output
%assign UARTRef = CAST("Number",block.RTWdata.UARTRef)	
%assign UART_NAME = UART_Tx_get_UART_NAME(block)
/* MCHP_UART_Tx DMA single buffer for %<UART_NAME> */
%assign UARTString = CAST("Number",block.RTWdata.UARTString)	
%assign TX_IMPLEMENTATION = MchpVector(RTWGenSettings.UART_TX_IMPLEMENTATION)
%assign TX_IMPLEMENTATION = TX_IMPLEMENTATION[UARTRef-1]		
%assign NSend_Input = CAST("Number",block.RTWdata.NSend_Input)
%assign NSend_Output = CAST("Number",block.RTWdata.NSend_Output)
%assign BlockInputLength = LibBlockInputSignalWidth(NSend_Input==1)		
%if BlockInputLength == 1
%assign UARTString = 0	
%endif
%assign UART_TX_DMACHANNEL = MchpVector(RTWGenSettings.UART_TX_DMACHANNEL)
%assign TX_DMA_CHANNEL = UART_TX_DMACHANNEL[UARTRef-1]		
%if ::isPIC32
%assign DMA_DCH = "DCH"	
%else
%assign DMA_DCH = "DMA"	
%endif
%assign No_DMA_Transfert = Test_No_DMA_Transfert_F(DMA_DCH,TX_DMA_CHANNEL,UARTRef,block)
%assign UART_HALF_DUPLEX_MODE = MchpVector(RTWGenSettings.UART_HALF_DUPLEX_MODE)
%assign UART_HALF_DUPLEX_MODE = UART_HALF_DUPLEX_MODE[UARTRef-1]
%assign AllOrNothing = CAST("Number",block.RTWdata.AllOrNothing)
%if (NSend_Input == 1)
%assign N_in = LibBlockInputSignal(0,"","",0)
%assign idxInputChars = 1
%else
%assign N_in = BlockInputLength
%assign idxInputChars = 0
%endif
%if UART_HALF_DUPLEX_MODE
%assign errmsg = "UART%<UARTRef> is configured for Half duplex mode. This mode is not compatible with DMA implementation for Tx. Considere using the Circular buffer or remove half duplex mode."
%<LibBlockReportError(block,errmsg)>
%error(errmsg)				
%endif
if %<No_DMA_Transfert>		/* If no ongoing DMA Transfer */				
{
%if NSend_Output
uint_T N_Out = 0;
%endif	
%if BlockInputLength > 1
{
int_T i1;
%assign u0 = LibBlockInputSignalAddr( idxInputChars, "","", 0)
%assign u = "u0[i1]"
const uint8_T *u0 = %<u0> ;
%if AllOrNothing
if (%<N_in> <= (Tx_BUFF_SIZE_%<UART_NAME> - MCHP_%<UART_NAME>_Tx.tail ))
{
%endif
%if UARTString == 0
for (i1 = 0; i1 < %<N_in> ; i1++) {
%else
for (i1 = 0; ( (i1 < %<N_in>) && (%<u> != 0) ) ; i1++) {
%endif
%else
%assign u = LibBlockInputSignal( idxInputChars, "", "", 0)
%endif
if (MCHP_%<UART_NAME>_Tx.tail < (Tx_BUFF_SIZE_%<UART_NAME> ))
{		
MCHP_%<UART_NAME>_Tx_buffer[MCHP_%<UART_NAME>_Tx.tail++] = %<u>;
%if NSend_Output
N_Out++;
%endif	
} 	
%if BlockInputLength > 1
else
i1 = %<N_in>; /* break the loop */	
}
}
%if AllOrNothing
}
%endif
%endif
%if NSend_Output
%assign Port_NOut = LibBlockOutputSignal(0, "","", 0)
%<Port_NOut> = N_Out;		
%endif							
if (MCHP_%<UART_NAME>_Tx.tail >= (Tx_BUFF_SIZE_%<UART_NAME> ) )
{  /* Buffer is full, request a DMA Transfer */
%<UART_Tx_SingleBuffer_RequestDMATransfert(TX_DMA_CHANNEL,UART_NAME,block)>
MCHP_%<UART_NAME>_Tx.tail = 0;
}				
}
%if NSend_Output
else
%assign Port_NOut = LibBlockOutputSignal(0, "","", 0)
%<Port_NOut> = 0;		
%endif						
%endfunction