%implements  MCHP_CN  "C"
%include "MCHP_Functions.tlc"
%include "MCHP_CN_Interrupt.tlc"
%function BlockTypeSetup(block, system) Output
%endfunction
%function BlockInstanceSetup(block, system) void
%if EXISTS(::MCHP_CN_nBlocks)
%assign ::MCHP_CN_nBlocks = ::MCHP_CN_nBlocks + 1
%else
%assign ::MCHP_CN_nBlocks = 1
%endif
%assign CNtype = CAST("Number",block.RTWdata.CNtype)
%if CNtype == 2 
%assign Channels =  MchpVector(block.RTWdata.Channels)
%assign PortL = MchpVector(block.RTWdata.PortL)
%assign PortN = MchpVector(block.RTWdata.PortN)	
%assign CNENx = [0,0,0,0,0,0,0,0,0,0,0,0]
%foreach idx = SIZE(Channels,1)
%assign PortLString = STRINGOF([%<PortL[idx]>])
%assign CNENx[PortL[idx] - 65] = CNENx[PortL[idx] - 65] | (1U << PortN[idx])	
%endforeach			
%foreach Ix = SIZE(CNENx,1)		
%if CNENx[Ix] != 0				
%assign Ii = CAST("Vector",[%<Ix+65>])
%assign IL = STRINGOF(Ii)
%addtorecord ::CompiledModel.MCHP MCHP_CN%<IL>_block block	
%endif
%endforeach		
%else
%addtorecord ::CompiledModel.MCHP MCHP_CN_block block	
%endif
%createrecord a {a 0}
%addtorecord ::CompiledModel.MCHP MCHP_CN a
%<Local2Global_ConcatVector(block.RTWdata,"Channels")>
%<Local2Global_ConcatVector(block.RTWdata,"PortL")>
%<Local2Global_ConcatVector(block.RTWdata,"PortN")>
%<Local2Global_ConcatVector(block.RTWdata,"RefTimers")>
%<Local2Global_ConcatVector(block.RTWdata,"Channel_UP_Down_Periode")>
%<Local2Global_ConcatVector(block.RTWdata,"ChangeDetected")>
%<Local2Global_ConcatVector(block.RTWdata,"OutputPortValue")>
%endfunction
%function Start(block, system) Output
%if EXISTS(::MCHP_CN_iBlocks)
%assign ::MCHP_CN_iBlocks = ::MCHP_CN_iBlocks + 1
%else
%assign ::MCHP_CN_iBlocks = 1
%endif
%assign IntPriority = CAST("Number",block.RTWdata.IntPriority)
%assign CNtype = CAST("Number",block.RTWdata.CNtype)
%assign Channels = ::CompiledModel.MCHP.MCHP_CN.Channels
%assign PortL = ::CompiledModel.MCHP.MCHP_CN.PortL
%assign PortN = ::CompiledModel.MCHP.MCHP_CN.PortN
%assign RefTimers = ::CompiledModel.MCHP.MCHP_CN.RefTimers
%assign Channel_UP_Down_Periode =::CompiledModel.MCHP.MCHP_CN.Channel_UP_Down_Periode
%assign ChangeDetected = ::CompiledModel.MCHP.MCHP_CN.ChangeDetected
%assign OutputPortValue = ::CompiledModel.MCHP.MCHP_CN.OutputPortValue
%if (::MCHP_CN_iBlocks == ::MCHP_CN_nBlocks) 
/* S-Function "Change Notification" Initialization Block: %<Name> */
/* config Change Notification peripheral */
%assign CNENx = [0,0,0,0,0,0,0,0,0,0,0,0]
%foreach idx = SIZE(Channels,1)
%if(ChangeDetected[idx] != 0)
CN%<Channels[idx]>_ChangeDetectedFlag = 0;
%endif
%if CNtype == 0 
_CN%<Channels[idx]>IE = 1; 	 /* Interrupt on every changes */
%elseif CNtype == 1 
%assign PortLString = STRINGOF([%<PortL[idx]>])
_CNIE%<PortLString>%<PortN[idx]> = 1; 	 /* Interrupt on every changes */
%else 
%assign PortLString = STRINGOF([%<PortL[idx]>])
%assign CNENx[PortL[idx] - 65] = CNENx[PortL[idx] - 65] | (1U << PortN[idx])	
%endif
%endforeach
%if CNtype == 2	
%foreach Ix = SIZE(CNENx,1)		
%if CNENx[Ix] != 0				
%assign Ii = CAST("Vector",[%<Ix+65>])
%assign IL = STRINGOF(Ii)
%if ::isPIC32
CNEN%<IL> |= %<MchpHex(CNENx[Ix])>;	/* Activate Change Notification Interrupts for PORT %<IL> */
CNCON%<IL> = 0x8000; /* Activate Change Notification */ 
%else
CNEN0%<IL> |= %<MchpHex(CNENx[Ix])>;	/* Activate Change Notification Interrupts for PORT %<IL> */
CNCON%<IL> = 0x8000; /* Activate Change Notification */ 
%endif
%<MCHP_SFR( "CN%<IL>IP" , IntPriority , "Set CN interrupt Priority" )>				
%<MCHP_SFR( "CN%<IL>IF" , 1 , "Fake interruption trig for initialisation" )>				
%<MCHP_SFR( "CN%<IL>IE" , 1 , "Enable Change Notification Interruption" )>				
%endif
%endforeach		
%else
%<MCHP_SFR( "CNIP" , IntPriority , "Set CN interrupt Priority" )>
%<MCHP_SFR( "CNIF" , 1 , "Fake interruption trig for initialisation" )>
%<MCHP_SFR( "CNIE" , 1 , "Enable Change Notification Interruption" )>
%endif
%openfile buffer
%foreach idx = SIZE(Channels,1)
%if ((Channel_UP_Down_Periode[idx] & 1) != 0)        
extern volatile uint16_T CN%<Channels[idx]>_up;
%endif
%if ((Channel_UP_Down_Periode[idx] & 2) != 0)        
extern volatile uint16_T CN%<Channels[idx]>_down;
%endif
%if ((Channel_UP_Down_Periode[idx] & 4) != 0)        
extern volatile uint16_T CN%<Channels[idx]>_RisingPeriode;
%endif
%if ((Channel_UP_Down_Periode[idx] & 8) != 0)        
extern volatile uint16_T CN%<Channels[idx]>_FallingPeriode;
%endif
%if (ChangeDetected[idx] != 0)
extern volatile uint16_T CN%<Channels[idx]>_ChangeDetectedFlag;
%endif
%endforeach
%foreach Port = 11		
%foreach idx=SIZE(Channels,1)
%if PortL[idx] == (Port + 65-1)
%assign PortLString = STRINGOF([%<PortL[idx]>])
extern unsigned volatile port%<PortLString>_Copy;
%break
%endif
%endforeach
%endforeach
%closefile buffer
%<LibCacheFunctionPrototype(buffer)>
%if CNtype == 2	
%assign CNENx = [0,0,0,0,0,0,0,0,0,0,0,0]
%foreach idx = SIZE(Channels,1)
%assign PortLString = STRINGOF([%<PortL[idx]>])
%assign CNENx[PortL[idx] - 65] = CNENx[PortL[idx] - 65] | (1U << PortN[idx])	
%endforeach			
%foreach Ix = SIZE(CNENx,1)		
%if CNENx[Ix] != 0				
%assign Ii = CAST("Vector",[%<Ix+65>])
%assign IL = STRINGOF(Ii)			
%if !ISFIELD(::CompiledModel.MCHP,"MCHP_CN%<IL>IE")
%<MCHP_CN_Interrupt(block,IL)>	
%endif				
%endif
%endforeach			
%else	
%if !ISFIELD(::CompiledModel.MCHP,"MCHP_CNIE")
%<MCHP_CN_Interrupt(block,"Z")>		
%endif
%endif
%endif
%endfunction
%function Outputs(block, system) Output
/* S-Function "MCHP_CN" Block: %<Name> */
%assign IntPriority = CAST("Number",block.RTWdata.IntPriority)
%assign CNtype = CAST("Number",block.RTWdata.CNtype)
%assign NTIMERS = CAST("Number",block.RTWdata.NTIMERS)
%assign Channels =  MchpVector(block.RTWdata.Channels)
%assign PortL = MchpVector(block.RTWdata.PortL)
%assign PortN = MchpVector(block.RTWdata.PortN)
%assign RefTimers =  MchpVector(block.RTWdata.RefTimers)
%assign Channel_UP_Down_Periode =  MchpVector(block.RTWdata.Channel_UP_Down_Periode)
%assign ChangeDetected =  MchpVector(block.RTWdata.ChangeDetected)
%assign OutputPortValue =  MchpVector(block.RTWdata.OutputPortValue)
%assign portOut = 0
%foreach idx = SIZE(Channels,1)
%assign PortLString = STRINGOF([%<PortL[idx]>])
%if ((Channel_UP_Down_Periode[idx] & 1) != 0)        
%assign u = LibBlockOutputSignal(portOut, "", "", 1)
%<u> = CN%<Channels[idx]>_up;
%assign portOut = portOut+1
%endif
%if ((Channel_UP_Down_Periode[idx] & 2) != 0)        
%assign u = LibBlockOutputSignal(portOut, "", "", 1)
%<u> = CN%<Channels[idx]>_down;
%assign portOut = portOut+1
%endif
%if ((Channel_UP_Down_Periode[idx] & 4) != 0)        
%assign u = LibBlockOutputSignal(portOut, "", "", 1)
%<u> = CN%<Channels[idx]>_RisingPeriode;
%assign portOut = portOut+1
%endif
%if ((Channel_UP_Down_Periode[idx] & 8) != 0)        
%assign u = LibBlockOutputSignal(portOut, "", "", 1)
%<u> = CN%<Channels[idx]>_FallingPeriode;
%assign portOut = portOut+1
%endif
%if (ChangeDetected[idx] != 0)        
%assign u = LibBlockOutputSignal(portOut, "", "", 1)
%<u> = CN%<Channels[idx]>_ChangeDetectedFlag;
CN%<Channels[idx]>_ChangeDetectedFlag = 0;	
%assign portOut = portOut+1
%endif
%if (OutputPortValue[idx] != 0)        
%assign u = LibBlockOutputSignal(portOut, "", "", 1)
%<u> = (port%<PortLString>_Copy & %<1U << PortN[idx] >) != 0 ;
%assign portOut = portOut+1
%endif
%endforeach
%endfunction
%function Update(block, system) Output
%endfunction
%function Local2Global_ConcatVector(blockRTWdata,Field) void
%assign tmp = MchpVector(blockRTWdata.%<Field>)
%if ISFIELD(::CompiledModel.MCHP.MCHP_CN,"%<Field>")
%foreach i = SIZE(tmp,1)
%assign ::CompiledModel.MCHP.MCHP_CN.%<Field> = ::CompiledModel.MCHP.MCHP_CN.%<Field> + %<tmp[i]>	
%endforeach
%else
%addtorecord ::CompiledModel.MCHP.MCHP_CN %<Field> [%<tmp>]
%endif
%assign tmp = ::CompiledModel.MCHP.MCHP_CN.%<Field>
%endfunction
