%% SYSTLC: Microchip Embedded Target Cortex M7 (real-time) TMF:MCHP_ARM0p.tmf  MAKE: make_rtw \
%% EXTMODE: ext_comm
%%
%%
%% Copyright 1994-2004 The MathWorks, Inc.
%% Abstract: Embedded real-time system target file.
%%--------------------------------------------------------------
%%   Embedded Coder for Microchip PIC32 family.                 |
%%   Generate .c and .h files from your Matlab/simulink model   |
%%   and compile the diagram to .hex and .cof file that can be  |
%%   downloaded directly into the microcontroller               |
%%                                                              |
%%      The Microchip name PIC, dsPIC, and MPLAB are            |
%%      registered trademarks of Microchip Technology Inc.      |
%%      MATLAB, Simulink, and Real-Time Workshop are            |
%%      registered trademarks of The MathWorks, Inc.            |
%%                                                              |
%%  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |
%%--------------------------------------------------------------
%selectfile NULL_FILE

%%----------------------------
%% TLC Configuration Variables Section
%%----------------------------

%assign CodeFormat = "Embedded-C"
%assign TargetType = "RT"		%% Real Time (vs NRT)
%assign Language   = "C"
%%assign stopTime = -1
%% Prevent TLC failure if simulation stop time = inf

%%------------
%% Settings
%%------------

%assign AutoBuildProcedure = !GenerateSampleERTMain

%% %assign SuppressSetEventsForThisBaseRateFcn = (TargetOS == "VxWorksExample")
%if !EXISTS("InlineSetEventsForThisBaseRateFcn")
  %assign InlineSetEventsForThisBaseRateFcn  = TLC_TRUE
%endif
%if !EXISTS("SuppressMultiTaskScheduler")
  %assign SuppressMultiTaskScheduler = TLC_TRUE
%endif
%assign SuppressSetEventsForThisBaseRateFcn = TLC_FALSE

%assign RateBasedStepFcn = 1	%% You can use the TLC variable RateBasedStepFcn to specify that only the rate-based step functions are generated, without the wrapper function. If your target calls the rate grouping compatible model_stepN function directly, set RateBasedStepFcn to 1. In this case, the wrapper function is not generated.


%assign TargetRegistMutexOp   = 1
%assign TargetRegistSynchroOp = 1
%% %include "commontargetlib.tlc" %% (required if RTOS only)

%%----------------------------
%% TLC MCHP Initialisation
%%----------------------------
%if 1
	%include "MCHP_FctStartup.tlc"
%endif

%% see globalmaplib.tlc
%% direct codegen to create a data map, excluding external outputs
%assign GenerateInterfaceAPI = 1
%%assign InterfaceAPIAsMatlabVar = "MCHP_modelAPI"

%assign  MapParameters = 1
%% %assign  MapBlockOutputs = 0
%% %assign  MapExternalInputs = 0
%% %assign  MapExternalOutputs = 0
%% %assign  MapStateflow = 0
%% %assign  MapDWork = 0
%% %assign  MapContStates = 0
%% %assign  MapDerivatives = 0

%%%include "commonsetup.tlc"
%% do your stuff
%%include "commonentry.tlc"  /% map is produced with generated code %/

%%----------------------------
%% Create Empty record MCHP which will contain MCHP related fields (i.e. global variables)
%%----------------------------
%addtorecord ::CompiledModel MCHP {UINTMAX 4294967295}
	%% add field UINTMAX: Default value from MathWorks is false: always 2^32 whatever the target

%%----------------------------
%% TLC Program Entry Point
%%----------------------------
%% Call entry point function.
%include "codegenentry.tlc"

%%<FEVAL("tlc2m", "debug", ::CompiledModel)>

%if ISFIELD(::CompiledModel, "MCHP_PostProcessTLCfile")  
	%foreach iFile = SIZE(::CompiledModel.MCHP_PostProcessTLCfile,1)
		%if FILE_EXISTS(::CompiledModel.MCHP_PostProcessTLCfile[iFile])
			%include "%<::CompiledModel.MCHP_PostProcessTLCfile[iFile]>"
		%else
			%error("File %<::CompiledModel.MCHP_PostProcessTLCfile[iFile]> not found.")
		%endif
	%endforeach
%endif

%%----------------------------
%% TLC MCHP End
%%----------------------------
%if 1
	%include "MCHP_FctEnd.tlc"
%endif
/%
  BEGIN_RTW_OPTIONS

	Chip = '32MX460F512L';

    linkerScript = '';
    headerPath = '';
    libPath = '';


	SystemHost = 'UNIX';	% Default value
	if ispc
		SystemHost = 'PC';
	elseif isunix
		SystemHost = 'UNIX';
	elseif ismac
		SystemHost = 'UNIX';		% MAC is considered as UNIX system ? to be checked
	end


	oIdx = 1;

	rtwoptions(oIdx).prompt = 'PIC32 Options';
	rtwoptions(oIdx).type = 'Category';
	rtwoptions(oIdx).enable = 'on';
	rtwoptions(oIdx).default = 25; % number of items under this category
													% excluding this one.
	rtwoptions(oIdx).popupstrings = '';
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).tooltip = '';
	rtwoptions(oIdx).callback = '';
	rtwoptions(oIdx).opencallback = '';
	rtwoptions(oIdx).closecallback = '';
	rtwoptions(oIdx).makevariable = '';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Chip reference';
	rtwoptions(oIdx).type = 'Edit';				% NonUI
%	rtwoptions(oIdx).enable = 'off';
	rtwoptions(oIdx).default = Chip;
	rtwoptions(oIdx).tlcvariable = 'PIC_REF';
	rtwoptions(oIdx).makevariable = 'PIC_REF';
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';
%	rtwoptions(oIdx).tooltip = ['Set in the Master Block'];

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Host platform';
	rtwoptions(oIdx).type = 'NonUI';				% NonUI
%	rtwoptions(oIdx).enable = 'off';
	rtwoptions(oIdx).default = SystemHost;		% PC / UNIX
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'HOST_PLATFORM';
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';
%	rtwoptions(oIdx).tooltip = ['Platform definition required for makefile'];	% only a check is beeing done in the makefile (that's useless !)

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Optimization Parameters';
	rtwoptions(oIdx).type = 'Edit';
	rtwoptions(oIdx).default = '-O1';
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'OPTIM_GCC';
	rtwoptions(oIdx).tooltip = ['Enter optimization parameters'];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Linker Options';
	rtwoptions(oIdx).type = 'Edit';
	rtwoptions(oIdx).default = ['''-t,--report-mem,-Map=info.map,-cref,--memorysummary,memoryfile.xml'''];	%% due to ',' this parameters must be within quotes
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'LDFLAGS';
	rtwoptions(oIdx).tooltip = ['Enter compiler settings'];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Output Format';
	rtwoptions(oIdx).type = 'Popup';
	rtwoptions(oIdx).popupstrings = 'elf|coff';
	rtwoptions(oIdx).default = 'elf';
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'OMF';
	rtwoptions(oIdx).tooltip = '';
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Generate hex binary output file';
	rtwoptions(oIdx).type = 'Checkbox';
	rtwoptions(oIdx).default = 'on';
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'ProduceHexOutput';
	rtwoptions(oIdx).tooltip = '';
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Generate assembly listing file';
	rtwoptions(oIdx).type = 'Checkbox';
	rtwoptions(oIdx).default = 'off';
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'AssemblyListing';
	rtwoptions(oIdx).tooltip = '';
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';


	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Microchip Compiler Path';
	rtwoptions(oIdx).type = 'Edit';
	rtwoptions(oIdx).default = '';

	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'GCCPATH';
	rtwoptions(oIdx).tooltip = ['Microchip Compiler Path'];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Linker Script';
	rtwoptions(oIdx).type = 'NonUI';
	rtwoptions(oIdx).enable = 'off';
	rtwoptions(oIdx).default = '';		% No linker script for PIC32
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'LINKER_SCRIPT';
	rtwoptions(oIdx).tooltip = ['Microchip Linker Script file'];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';
	rtwoptions(oIdx).visibility = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Enter Libraries';
	rtwoptions(oIdx).type = 'Edit';
	rtwoptions(oIdx).default = libPath;
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'PIC_LIB';
	rtwoptions(oIdx).tooltip = ['Enter Libraries with complete path like <LIB1><space><LIB2>. Path or file name shall not contain any spaces'];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Header Include Path';
	rtwoptions(oIdx).type = 'Edit';
	rtwoptions(oIdx).default = headerPath;
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'PIC_INCLUDES';
	rtwoptions(oIdx).tooltip = ['Enter Include Directories Path as -I<Path1><space>-I<Path2><space>. <PathN> shall not contain any spaces'];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';


oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Compiler executable';
	rtwoptions(oIdx).type = 'Edit';
    rtwoptions(oIdx).default = '';
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'GCC1';
	rtwoptions(oIdx).tooltip = ['Compiler'];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';

oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Linker executable';
	rtwoptions(oIdx).type = 'Edit';
	rtwoptions(oIdx).default = '';
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'AR1';
	rtwoptions(oIdx).tooltip = ['Linker'];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';

oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'bin2hex';
	rtwoptions(oIdx).type = 'Edit';
	rtwoptions(oIdx).default = '';
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'BIN2HEX';
	rtwoptions(oIdx).tooltip = ['BIN2HEX utility'];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';

oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Create post compilation assembly file (dump)';
	rtwoptions(oIdx).type = 'Edit';
	rtwoptions(oIdx).default = '';
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'OBJDUMP';
	rtwoptions(oIdx).tooltip = ['OBJDUMP utility'];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Last programmer detected : ';
	rtwoptions(oIdx).type = 'NonUI';
	rtwoptions(oIdx).default = '';
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'MCHP_PROGRAMMER';
	rtwoptions(oIdx).tooltip = [''];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Flash Chip after compilation';
	rtwoptions(oIdx).type = 'Checkbox';
	rtwoptions(oIdx).default = 'off';
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'MCHP_AUTO_FLASH';
	rtwoptions(oIdx).tooltip = [''];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Use multithread compilation (reduce compilation time)';
	rtwoptions(oIdx).type = 'Checkbox';
	rtwoptions(oIdx).default = 'on';
	rtwoptions(oIdx).tlcvariable = '';
	rtwoptions(oIdx).makevariable = 'MCHP_MULTITHREAD_COMPILATION';
	rtwoptions(oIdx).tooltip = [''];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';
	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'TIMER PRESCALER';
	rtwoptions(oIdx).type = 'NonUI';
	rtwoptions(oIdx).default = '';
	rtwoptions(oIdx).tlcvariable = 'TIMER_PRESCALER';
	rtwoptions(oIdx).makevariable = '';
	rtwoptions(oIdx).tooltip = [''];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';
	rtwoptions(oIdx).visibility = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'TIMER PERIOD';
	rtwoptions(oIdx).type = 'NonUI';
	rtwoptions(oIdx).default = '';
	rtwoptions(oIdx).tlcvariable = 'TIMER_PERIOD';
	rtwoptions(oIdx).makevariable = '';
	rtwoptions(oIdx).tooltip = [''];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';
	rtwoptions(oIdx).visibility = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'TIMER START';
	rtwoptions(oIdx).type = 'NonUI';
	rtwoptions(oIdx).default = '';
	rtwoptions(oIdx).tlcvariable = 'TIMER_START';
	rtwoptions(oIdx).makevariable = '';
	rtwoptions(oIdx).tooltip = [''];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';
	rtwoptions(oIdx).visibility = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'MCHP_CompiledTime_ModelSampleTimes_Txt';
	rtwoptions(oIdx).type = 'NonUI';
	rtwoptions(oIdx).default = '';
	rtwoptions(oIdx).tlcvariable = 'MCHP_CompiledTime_ModelSampleTimes_Txt';
	rtwoptions(oIdx).makevariable = '';
	rtwoptions(oIdx).tooltip = [''];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';
	rtwoptions(oIdx).visibility = 'off';
	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'RTWGenSettings_txt';
	rtwoptions(oIdx).type = 'NonUI';
	rtwoptions(oIdx).default = '';
	rtwoptions(oIdx).tlcvariable = 'RTWGenSettings_txt';
	rtwoptions(oIdx).makevariable = '';
	rtwoptions(oIdx).tooltip = [''];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';
	rtwoptions(oIdx).visibility = 'off';

	%% This value is required for ExtMode for Early Matlab release (R2012a and R2012b at least. Not required with R2014b at least)
	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'TargetExtensionPlatform';
	rtwoptions(oIdx).type = 'NonUI';
	rtwoptions(oIdx).default = '';
	rtwoptions(oIdx).tlcvariable = 'TargetExtensionPlatform';
	rtwoptions(oIdx).makevariable = '';
	rtwoptions(oIdx).tooltip = [''];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';
	rtwoptions(oIdx).visibility = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'Enable Data upload with External Mode';
	rtwoptions(oIdx).type = 'Checkbox';
	rtwoptions(oIdx).default = 'off';
	rtwoptions(oIdx).tlcvariable = 'EXTMODE_DATA_UPLOAD';
	rtwoptions(oIdx).makevariable = 'EXTMODE_DATA_UPLOAD';
	rtwoptions(oIdx).tooltip = [''];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';
	rtwoptions(oIdx).visibility = 'off';

	oIdx = oIdx+1;
	rtwoptions(oIdx).prompt = 'External Mode XCP Memory Blocks parameters';
	rtwoptions(oIdx).type = 'NonUI';
	rtwoptions(oIdx).default = '[-1 8]';
	rtwoptions(oIdx).tlcvariable = 'MCHP_XCP_MemoryBlockParameters';
	rtwoptions(oIdx).makevariable = '';
	rtwoptions(oIdx).tooltip = ['Define number of sample time and number of logged data for each sample time'];
	rtwoptions(oIdx).modelReferenceParameterCheck = 'off';
	rtwoptions(oIdx).visibility = 'off';
  %----------------------------------------%
  % Configure RTW code generation settings %
  %----------------------------------------%

  rtwgensettings.BuildDirSuffix = mchp.prefs.getFolderNameExtension();
  rtwgensettings.DerivedFrom = 'ert.tlc';
  rtwgensettings.Version = '1';
  rtwgensettings.SelectCallback = ['MCHP_ARM7_stf_select_callback(hDlg, hSrc)'];

% rtwgensettings.UnselectCallback    = 'MCHP_dsPIC_stf_select_callback(hSrc,hDlg);';
% rtwgensettings.ActivateCallback    = 'MCHP_dsPIC_stf_select_callback(hSrc,hDlg);';

  %rtwgensettings.PostApplyCallback = ['dsPIC_postapplycallback(hDlg, hSrc, model)'];
% rtwgensettings.StructByteAlignment = '16';		%% to check
  END_RTW_OPTIONS
%/