
%function MCHP_UART_Rx_SAMx7_DMA_pingPongBuffer(block,system) Output
%assign UARTRef = CAST("Number",block.RTWdata.UARTRef)
%assign nUSART = CAST("Number",block.RTWdata.nUSART)	
%if UARTRef > nUSART
%assign Per_Type = "UART"
%assign REG_NAME = "UART"
%assign REG_NAME2 = ""
%assign INTERRUPT_STATUS_REG = "SR"
%assign UART_Index = (UARTRef-1) - nUSART
%else
%assign Per_Type = "USART"
%assign REG_NAME = "US"
%assign REG_NAME2 = "USART_"
%assign INTERRUPT_STATUS_REG = "CSR"
%assign UART_Index = UARTRef-1
%endif
%assign UART_NAME = "%<Per_Type>%<UART_Index>"
%assign RX_IMPLEMENTATION = MchpVector(RTWGenSettings.UART_RX_IMPLEMENTATION)
%assign RX_IMPLEMENTATION = RX_IMPLEMENTATION[UARTRef-1]		
%assign UART_RX_DMACHANNEL = MchpVector(RTWGenSettings.UART_RX_DMACHANNEL)
%assign RX_DMA_CHANNEL = UART_RX_DMACHANNEL[UARTRef-1]		
%if (RX_IMPLEMENTATION > 1)
%assign RX_BufferPtrType = CAST( "String","uint_T")
%endif
%assign ChipIdL1 = CAST("String",RTWGenSettings.ChipIdL1)
%assign ChipIdL2 = CAST("String",RTWGenSettings.ChipIdL2)
%assign ChipIdL3 = CAST("String",RTWGenSettings.ChipIdL3)
%assign UART_HALF_DUPLEX_MODE = MchpVector(RTWGenSettings.UART_HALF_DUPLEX_MODE)
%assign UART_HALF_DUPLEX_MODE = UART_HALF_DUPLEX_MODE[UARTRef-1]
/% Split:
-1 means no split; read all received chars
other value means stop reading buffer when this value occurence
FillIn:
-1: Fill in with latest value read
-2: do nothing
-3: Add one trailing 0 (only when output is a vector of size > 1)
other positive value: default value for FillIn
%/
%assign FlagOut = CAST("Number",block.RTWdata.FlagOut)
%assign Split = CAST("Number",block.RTWdata.Split)
%assign FillIn = CAST("Number",block.RTWdata.FillIn)
{ /* Start of Rx reception block */
%if (FillIn == -1)  
static uint8_t %<UART_NAME>last_value;  /* last received value */
%endif
%if FlagOut == 1    
uint32_t bytes_counter = 0UL;   /* number of bytes received counter */
%assign yCnt = LibBlockOutputSignal(0,"", "",0)
%endif
%assign OutLength = LibBlockOutputSignalWidth(%<FlagOut + 0>) 
%if (OutLength == 1) && (FillIn == -3)	
%warning("'Add one 0 trailing 0' option is not possible when Rx output is a scalar. Output value will be received value if any, 0 otherwise.")
%assign FillIn = 0  
%elseif (FillIn == -3)
%assign OutLength = OutLength - 1 
%endif
%if OutLength > 1
%assign y0 = LibBlockOutputSignalAddr(%<FlagOut + 0>,"","", 0) 
%assign y = "y0[idx]" 
{   /* Fill-in buffer */
uint32_t idx;
uint8_T *y0 = %<y0>;
for (idx = 0UL; idx < %<OutLength>UL; idx++)
{
if(MCHP_total_bytes_in_output_buffer > 0UL) /* if Rx-DMA output buffer is not empty */
{
%<y> = MCHP_%<UART_NAME>_Rx_OutputBuffer[idx]; 	  /* copy rx-output byte to block transfer buffer */
%else
%assign y = LibBlockOutputSignal( %<FlagOut + 0>, "", "", 0) 
%endif
%if Split != -1
if (%<y> == %<Split>)
break; /* Exit loop on first occurence of %<Split> encountered */
%endif
%if (FlagOut == 1)
bytes_counter ++; /* Count the number of characters received */
%endif
%if (FillIn == -1)
%<UART_NAME>last_value = %<y>;
%endif
}
else
{
%switch FillIn
%case -1
%<y> = %<UART_NAME>last_value; /* Rx buffer empty; fill-in output vector with last value */
%break
%case -2    
%if OutLength > 1	
break;		
%endif
%break
%case -3			
break;	/* Rx buffer empty, exit loop */
%break
%default							
%<y> = %<FillIn>; /* Rx buffer empty. Fill-in output vector with given value */
%break
%endswitch					
}
%if OutLength > 1
} /* end for loop */
%endif
%if (FillIn == -3)
%<y> = 0;	/* add one trailing 0. */
%endif
%if OutLength > 1
} /* end code-block to fill-in buffer */
%endif
%if (FlagOut == 1)
%<yCnt> = bytes_counter; /* Number of char received */
%endif
%if (RX_IMPLEMENTATION == 3 && ::isSAMx7) 
/* Flush the DMA FIFO only if no character is being received  */
if( 0UL == (%<UART_NAME>_REGS->%<REG_NAME>_%<INTERRUPT_STATUS_REG> & %<REG_NAME>_%<INTERRUPT_STATUS_REG>_%<REG_NAME2>RXRDY_Msk))
{
XDMAC_REGS->XDMAC_GSWF |= (1UL << XDMAC_RX_CH); /* Request a DMA flush for XDMAC channel %<RX_DMA_CHANNEL> (used by %<UART_NAME>-Rx) */
}
} /* end of Rx reception block */
%endif
%endfunction