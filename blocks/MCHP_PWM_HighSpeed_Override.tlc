%implements  MCHP_PWM_HighSpeed_Override "C"
%include "MCHP_Functions.tlc"
%assign ::MCHP_IOCONx_OVERREN_OVERDAT = [0,0,0,0,0,0,0,0,0]
%function BlockInstanceSetup(block, system) void
%assign OVERREN_OVERDAT_Refs = MchpVector(block.RTWdata.OVERREN_OVERDAT_Refs)
%assign OVEREN_OVERDAT_Initial = MchpVector(block.RTWdata.OVEREN_OVERDAT_Initial)
%foreach idx = SIZE(OVERREN_OVERDAT_Refs,1)
%assign ::MCHP_IOCONx_OVERREN_OVERDAT[%<OVERREN_OVERDAT_Refs[idx]-1>] = OVEREN_OVERDAT_Initial[idx]
%endforeach
%endfunction
%function BlockTypeSetup(block, system) void
%assign OVERREN_OVERDAT_Refs = MchpVector(block.RTWdata.OVERREN_OVERDAT_Refs)
%if SIZE(OVERREN_OVERDAT_Refs,1) >= 1
%openfile tmpGlobalVariable
%foreach idx = SIZE(OVERREN_OVERDAT_Refs,1)
extern volatile uint16_T MCHP_IOCON%<OVERREN_OVERDAT_Refs[idx]>_save;
%endforeach
%closefile tmpGlobalVariable
%<LibCacheExtern(tmpGlobalVariable)>
%foreach idx = SIZE(OVERREN_OVERDAT_Refs,1)
%assign ::GlobalVariable = ::GlobalVariable + "volatile uint16_T MCHP_IOCON%<OVERREN_OVERDAT_Refs[idx]>_save;"	
%endforeach
%endif
%endfunction
%function Start(block, system) Output
%endfunction
%function Outputs(block, system) Output
%assign OVERREN_OVERDAT_Refs = MchpVector(block.RTWdata.OVERREN_OVERDAT_Refs)
{
uint16_T register tmp;
%if SIZE(OVERREN_OVERDAT_Refs,1) > 1
__asm__ volatile ("disi #0x3FFF");	/* Might be critical to update all PWM channels at once !*/
%endif
%foreach idx = SIZE(OVERREN_OVERDAT_Refs,1)
%if LibBlockInputSignalConnected(idx)
%assign y = LibBlockInputSignal(idx, "", "", 0)
tmp = IOCON%<OVERREN_OVERDAT_Refs[idx]>;
tmp = ( (tmp ^ ((uint16_T) %<y> << 6)) & 0x3C0) ^ tmp;	/* Set bits [6 7 8 9] accordingly (OVERENH, OVRENL and OVERDATH, OVERDATL) */
%if ::MCHP_FLTMODx_VAL[OVERREN_OVERDAT_Refs[idx]] == 0	
if (0U == PWMCON%<idx+1>bits.FLTSTAT)	/* only update if no fault */
{
%endif
IOCON%<OVERREN_OVERDAT_Refs[idx]> = tmp;
%if ::MCHP_FLTMODx_VAL[OVERREN_OVERDAT_Refs[idx]] == 0	
} else {
MCHP_IOCON%<OVERREN_OVERDAT_Refs[idx]>_save = tmp;
}
%endif
%endif
%endforeach
%if SIZE(OVERREN_OVERDAT_Refs,1) > 1
__asm__ volatile ("disi #0");
%endif
}
%endfunction
