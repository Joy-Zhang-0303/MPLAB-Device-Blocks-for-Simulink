%implements  MCHP_MCU_LOAD "C"
%include "MCHP_Functions.tlc"
%assign ::MCHP_MCULoadBlocks_TID = []
%assign ::MCHP_MCULoadBlocks_Timer = []
%assign ::MCHP_MCULoadBlocks_PIN = []
%function BlockInstanceSetup(block, system) void
%assign tmpTID = LibBlockSampleTime(block) 
%if tmpTID == 0
%assign tmpTID = -3	
%endif
%if tmpTID > 0	
%assign tmpTID = block.TID	
%endif
%assign Timer = CAST("Number",block.RTWdata.MCULoadTimerRef)
%assign MCULoadPin = CAST("Number",block.RTWdata.MCULoadPin)
%createrecord MCHP_TLCData {MCHP_TID tmpTID}
%addtorecord block MCHP_TLCData MCHP_TLCData
%if (tmpTID >= 0) && (Timer > 0)	
%assign MCHP_MCULoadBlocks_TIDLength = FEVAL("numel",::MCHP_MCULoadBlocks_TID)
%assign MCHP_MCULoadBlocks_TIDLength = CAST("Number",MCHP_MCULoadBlocks_TIDLength)
%assign MCHP_MCULoadBlocks_TimerLength = FEVAL("numel",::MCHP_MCULoadBlocks_Timer)
%assign MCHP_MCULoadBlocks_TimerLength = CAST("Number",MCHP_MCULoadBlocks_TimerLength)
%assign FlagRequireToAdd = 1
%foreach idx = MCHP_MCULoadBlocks_TIDLength		
%if ::MCHP_MCULoadBlocks_TID[idx] == tmpTID
%foreach idx = MCHP_MCULoadBlocks_TimerLength
%if ::MCHP_MCULoadBlocks_Timer[idx] == Timer
%assign FlagRequireToAdd = 0
%endif
%endforeach
%endif
%endforeach
%if (MCHP_MCULoadBlocks_TIDLength == 0)
%assign MCHP_NEAR_MEM = Mchp_NEAR_MEM()
%openfile tmpGlobalVariable
extern volatile uint16_T MCHP_MCULoadResult[] %<MCHP_NEAR_MEM>;  	
extern volatile uint16_T MCHP_MCULoadPreviousTimerValue[] %<MCHP_NEAR_MEM>;	
%closefile tmpGlobalVariable
%<LibCacheExtern(tmpGlobalVariable)>
%endif
%if FlagRequireToAdd
%assign ::MCHP_MCULoadBlocks_TID = ::MCHP_MCULoadBlocks_TID + tmpTID		
%assign ::MCHP_MCULoadBlocks_Timer = ::MCHP_MCULoadBlocks_Timer + Timer		
%endif
%endif
%if MCULoadPin >= 0
%assign MCHP_MCULoadBlocks_PINLength = FEVAL("numel",::MCHP_MCULoadBlocks_PIN)
%assign MCHP_MCULoadBlocks_PINLength = CAST("Number",MCHP_MCULoadBlocks_PINLength)
%assign FlagRequireToAdd = 1
%foreach idx = MCHP_MCULoadBlocks_PINLength		
%if ::MCHP_MCULoadBlocks_PIN[idx] == MCULoadPin
%assign FlagRequireToAdd = 0
%endif
%endforeach
%if FlagRequireToAdd
%assign ::MCHP_MCULoadBlocks_PIN = ::MCHP_MCULoadBlocks_PIN + MCULoadPin		
%endif
%endif
%endfunction
%function BlockTypeSetup(block, system) void
%assign MCHP_NEAR_MEM = Mchp_NEAR_MEM()
%openfile tmpGlobalVariable
extern volatile uint_T mcuFlagRecursion %<MCHP_NEAR_MEM>;		
%closefile tmpGlobalVariable
%<LibCacheExtern(tmpGlobalVariable)>
%assign ::GlobalVariable = ::GlobalVariable + "volatile uint_T mcuFlagRecursion " + MCHP_NEAR_MEM + " = 0;"	
%endfunction
%function Start(block, system) Output
%assign MCULoadTimerRef = CAST("Number",block.RTWdata.MCULoadTimerRef)
%assign nTIMERS = CAST("Number",RTWGenSettings.nTIMERS)
%assign nSCCP = CAST("Number",RTWGenSettings.nSCCP) 		
%if MCULoadTimerRef <= nTIMERS 
%assign idxT = MCULoadTimerRef
%assign TimerName = "TIMER %<idxT>"
%assign intPrefix = "T"
%assign TMRx = "TMR%<idxT>"
%else 
%assign idxT = MCULoadTimerRef - nTIMERS
%assign TimerName = "CCP TIMER %<idxT>"
%assign intPrefix = "CCP"
%assign TMRx = "CCP%<idxT>TMRL"
%endif
%<TMRx> = 0;	/* Initialize %<TimerName> Value to 0. %<TimerName> is enabled only when the mcu is not idle */
%endfunction
%function Outputs(block, system) Output
/* S-Function "MCHP_MCU_LOAD" Block: %<Name> */
%assign MCHP_TID = block.MCHP_TLCData.MCHP_TID
%assign MCULoadTimerRef = CAST("Number",block.RTWdata.MCULoadTimerRef)
%if (MCHP_TID >= 0) && (MCULoadTimerRef > 0)
%assign u = LibBlockOutputSignal(0, "", "", 0)
%if EXISTS(::MCHP_MCULoadBlocks_TID)
%if (SIZE(::MCHP_MCULoadBlocks_TID,1) > 0)
%foreach idx = SIZE(::MCHP_MCULoadBlocks_TID,1)
%if (::MCHP_MCULoadBlocks_TID[idx] == MCHP_TID) && (::MCHP_MCULoadBlocks_Timer[idx] == MCULoadTimerRef) 
%<u> = MCHP_MCULoadResult[%<idx>];
%if CompiledModel.FixedStepOpts.SolverMode == "MultiTasking"
%else
MCHP_MCULoadResult[%<idx>] = 0;			/* Reset Value */	
%endif
%endif
%endforeach
%endif
%endif
%endif
%endfunction
