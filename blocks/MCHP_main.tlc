
%include "MCHP_main_sr.tlc"
%include "MCHP_main_mr.tlc"
%include "MCHP_pilmain.tlc"
%include "MCHP_Functions.tlc"
%include "MCHP_Scheduler.tlc"
%function fcnMCHPwritePICIncludeHeader() void
%assign MyModelName = CompiledModel.Name
%assign ::modelH  = LibCreateSourceFile("Includes", "Simulink", MyModelName)
%openfile tmpBuf
%assign ARCH3 =  CAST("String",RTWGenSettings.arch3)		
%assign ChipIdL1 = CAST("String",RTWGenSettings.ChipIdL1)
%assign ChipIdL2 = CAST("String",RTWGenSettings.ChipIdL2)
%assign ChipIdL3 = CAST("String",RTWGenSettings.ChipIdL3)
%assign ChipIdN =  CAST("String",RTWGenSettings.ChipIdN)
%assign ChipIdN = FEVAL("str2num",ChipIdN)
%assign ChipIdN = FEVAL("int32",ChipIdN)		
%assign MIPS = CAST("Real",RTWGenSettings.MIPS)
#define FCY (%<CAST("Unsigned",MIPS)>)		/* Instruction Frequency FCY set at  %< MIPS / 1000000 > MHz */
/* Include for pic %<ARCH3> */
%switch ::CORE
%case "PIC"
#include <xc.h> 	
#include <libpic30.h>	/* For possible use with C function Call block (delay_ms or delay_us functions might be used by few peripherals) */
#include <libq.h>  		/* For possible use with C function Call block */ 	
%break
%case "PIC32"
#include <xc.h> 	
%break 	
%case "CORTEX_M0p" 	
#define ARM_MATH_CM0PLUS 	
#include <xc.h> 	
%break
%case "CORTEX_M4F"
#define ARM_MATH_CM4 	
#include <xc.h> 	
%break 	
%case "CORTEX_M7"
#define ARM_MATH_CM7 	 	
#include <xc.h> 	
%break
%default
%error("Internal error: chip not recognized")
%endswitch
%closefile tmpBuf
%<LibSetSourceFileSection(modelH,"Includes",tmpBuf)>
%endfunction
%function fcnMCHPwriteMain() void
%<LibWriteToStandardOutput("### Writing main")>
%assign fname = "MCHP_modelInclude.h"
%<LibWriteToStandardOutput("### Writing " + fname )>
%openfile buf = fname
/******************************************************/
/* This file includes simulink model public .h files. */
/* File name will not depends on model's name 	      */
/* simplifying inclusion for your shared c/h added    */
/* code (if any)  	                                  */
/******************************************************/
#include "%<LibGetMdlPubHdrBaseName()>.h"
#include "%<LibGetMdlPrvHdrBaseName()>.h"
%closefile buf
%<SLibSetModelFileName("Microchip",fname)>
%assign fname = "%<CompiledModel.Name>" + "_main"
%<SLibSetModelFileName("mainSrc",fname)>
%openfile tmpBuf
%assign FUSES =  CAST("String",RTWGenSettings.FuseConfigTxt)
%if ISFIELD(RTWGenSettings,"DOS_02552_msi_upb_v1_Slave") && (CAST("Number",RTWGenSettings.DOS_02552_msi_upb_v1_Slave) != 0)
%openfile SlaveConfighFile = "Secondary_FuseConfig.h"
/* Set Fuses Options */
%<FUSES>\
%closefile SlaveConfighFile
%else
/* Set Fuses Options */
%<FUSES>\
%endif
#define MCHP_isMainFile		
#include "%<LibGetMdlPubHdrBaseName()>.h"		
#include "%<LibGetMdlPrvHdrBaseName()>.h"	
%closefile tmpBuf
%<SLibCacheCodeToFile("mainSrc_incl", tmpBuf)>
%openfile tmpBuf	
/* Microchip Global Variables */
%assign MCHP_NEAR_MEM = Mchp_NEAR_MEM()
%if EXISTS(::MCHP_MCULoadBlocks_Timer)
%if SIZE(::MCHP_MCULoadBlocks_Timer,1) > 0
%assign tmp = SIZE(::MCHP_MCULoadBlocks_Timer,1)
volatile uint16_T MCHP_MCULoadResult[%<tmp>] %<MCHP_NEAR_MEM>;  	
volatile uint16_T MCHP_MCULoadPreviousTimerValue[%<tmp>] %<MCHP_NEAR_MEM>;  	
%endif
%endif
%if CompiledModel.FixedStepOpts.SolverMode == "MultiTasking" 	
%assign MASTER_BusyFlag = CAST("Number",RTWGenSettings.MASTER_BusyFlag)
%if (MASTER_BusyFlag != -1)
%assign ::GlobalVariable = ::GlobalVariable + "volatile uint_T BusyFlagRecursion " + MCHP_NEAR_MEM + " = 0;"		
%endif
%endif
%<::GlobalVariable>\
%if ISFIELD(RTWGenSettings,"DOS_02552_msi_upb_v1_Master") && (CAST("Number",RTWGenSettings.DOS_02552_msi_upb_v1_Master) != 0)
%if EXISTS(::MCHP_dsPIC_HAVESECONDARYIMAGE)
%if ::MCHP_dsPIC_HAVESECONDARYIMAGE == 1
#include "Secondary_FuseConfig.h"
#include "secondary_image.h"
%endif
%endif
%endif
%closefile tmpBuf
%<SLibCacheCodeToFile("mainSrc_fcn_defn", tmpBuf)>
%if !IsModelReferenceTarget()	
%<MCHP_Scheduler_Main()>
%else	 
%<FcnPilTaskingMain()>\		
%endif
%endfunction
%assign ::MCHP_isSubSystem = CAST("Number",RTWGenSettings.MCHP_isSubSystem)
%assign ::MCHP_isPilSim = CAST("Number",RTWGenSettings.MCHP_isPilSim)
%if !IsModelReferenceTarget()	
%if !::MCHP_isSubSystem
%trace Compile model for real time run. Generate main function.
%<fcnMCHPwritePICIncludeHeader()>
%<fcnMCHPwriteMain()>  
%else
%trace Compile sub-system. Do not generate main function.
%endif
%else	
%if ISEQUAL(ModelReferenceTargetType,"RTW")
%if ::MCHP_isPilSim
%warning Compile model for PIL simulation. Generate main function.
%<fcnMCHPwritePICIncludeHeader()>
%<fcnMCHPwriteMain()>
%else
%warning Compile sub-model. Do not generate main function.
%endif
%endif
%endif
