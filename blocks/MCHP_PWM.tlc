%implements  MCHP_PWM  "C"
%include "MCHP_Functions.tlc"
%function BlockInstanceSetup(block, system) void
%assign Instanciation = CAST("Number",block.RTWdata.Instanciation)
%if Instanciation == 1
%assign ::MCHP_PWM_Block = block
%endif
%endfunction
%function Start(block, system) Output
%assign Instanciation = CAST("Number",block.RTWdata.Instanciation)
%if Instanciation == 0
%return 
%endif
%assign PWM_REF = CAST("Number",block.RTWdata.PWM_REF)
%assign Flag = CAST("Number",block.RTWdata.Flag)
%assign PxTCON = CAST("Number",block.RTWdata.PxTCON)
%assign PxTPER = CAST("Number",block.RTWdata.PxTPER)
%assign PxSECMP = CAST("Number",block.RTWdata.PxSECMP)
%assign PWMxCON1 = CAST("Number",block.RTWdata.PWMxCON1)
%assign PWMxCON2 = CAST("Number",block.RTWdata.PWMxCON2)
%assign PxDTCON1 = CAST("Number",block.RTWdata.PxDTCON1)
%assign PxDTCON2 = CAST("Number",block.RTWdata.PxDTCON2)
%assign PxFLTACON = CAST("Number",block.RTWdata.PxFLTACON)
%assign PxFLTBCON = CAST("Number",block.RTWdata.PxFLTBCON)
%assign PxOVDCON = CAST("Number",block.RTWdata.PxOVDCON)
%assign PxDC1 = CAST("Number",block.RTWdata.PxDC1)
%assign PxDC2 = CAST("Number",block.RTWdata.PxDC2)
%assign PxDC3 = CAST("Number",block.RTWdata.PxDC3)
%assign PxDC4 = CAST("Number",block.RTWdata.PxDC4)
%assign OVDCON_Input = CAST("Number",block.RTWdata.OVDCON_Input)
%if PWM_REF == 0
%assign P = ""
%assign Ref = ""
%else
%assign P = "P"
%assign Ref = PWM_REF
%endif
PWM%<Ref>CON1 = %<MchpHex(PWMxCON1)>;
PWM%<Ref>CON2 = %<MchpHex(PWMxCON2)>;
%<P>%<Ref>DTCON1 = %<MchpHex(PxDTCON1)>;
%if %<PxDTCON2> != -1
%<P>%<Ref>DTCON2 = %<MchpHex(PxDTCON2)>;
%endif
%<P>%<Ref>FLTACON = %<MchpHex(PxFLTACON)>;
%if %<PxFLTBCON> != -1
%<P>%<Ref>FLTBCON = %<MchpHex(PxFLTBCON)>;
%endif
%if OVDCON_Input != 1
%if PxOVDCON != -1
%<P>%<Ref>OVDCON = %<MchpHex(PxOVDCON)>;
%endif
%endif
%if PxDC1 != -1
P%<Ref>DC1 = %<MchpHex(PxDC1)>;
%endif
%if PxDC2 != -1
P%<Ref>DC2 = %<MchpHex(PxDC2)>;
%endif
%if PxDC3 != -1
P%<Ref>DC3 = %<MchpHex(PxDC3)>;
%endif
%if PxDC4 != -1
P%<Ref>DC4 = %<MchpHex(PxDC4)>;
%endif
P%<Ref>TPER = %<MchpHex(PxTPER)>;
%if (Flag & 1) != 0
SEVTCMP = %<MchpHex(PxSECMP)>;
%else
P%<Ref>SECMP = %<MchpHex(PxSECMP)>;
%endif
P%<Ref>TCON = %<MchpHex(PxTCON)>; /* Enable PWM */
%if LibBlockSampleTime(block) == -2		
%<Update(block, system)>
%endif
%endfunction
%function Update(block, system) Output
%assign Instanciation = CAST("Number",block.RTWdata.Instanciation)
%if Instanciation == 0
%assign block = ::MCHP_PWM_Block 
%endif
%assign PWM_REF = CAST("Number",block.RTWdata.PWM_REF)
%assign Flag = CAST("Number",block.RTWdata.Flag)
%assign InputGlobalPeriod = CAST("Number",block.RTWdata.InputGlobalPeriod)
%assign TriggerEvent_input = CAST("Number",block.RTWdata.TriggerEvent_input)
%assign FltABinput = CAST("Number",block.RTWdata.FltABinput)
%assign OVDCON_Input = CAST("Number",block.RTWdata.OVDCON_Input)
%assign OutputFaultAB = CAST("Number",block.RTWdata.OutputFaultAB)
%assign PxFLTACON = CAST("Number",block.RTWdata.PxFLTACON)
%assign PxFLTBCON = CAST("Number",block.RTWdata.PxFLTBCON)
%assign port_FLT = CAST("String",block.RTWdata.port_FLT)
%assign port_FLT = FEVAL("str2num",port_FLT)
%assign port_FLT = FEVAL("int32",port_FLT)
%assign EnableChannels = CAST("String",block.RTWdata.EnableChannels)
%assign EnableChannels = FEVAL("str2num",EnableChannels)
%assign EnableChannels = FEVAL("int32",EnableChannels)		
%if PWM_REF == 0
%assign P = ""
%assign Ref = ""
%else
%assign P = "P"
%assign Ref = PWM_REF
%endif
%assign IndexInput = 0
%if InputGlobalPeriod == 1
%assign y = LibBlockInputSignal(IndexInput, "", "",0)
%assign IndexInput = IndexInput + 1
%if LibBlockInputSignalConnected(IndexInput-1)
P%<Ref>TPER  = %<y>; /* Set Period */
%endif
%endif
%foreach idx = SIZE(EnableChannels,1)
%assign y = LibBlockInputSignal(IndexInput, "", "",0)
%assign IndexInput = IndexInput + 1
%if LibBlockInputSignalConnected(IndexInput-1)
P%<Ref>DC%<EnableChannels[idx]> = %<y>; /* Period for Channel %<EnableChannels[idx]> */
%endif
%endforeach
%if TriggerEvent_input == 1
%assign y = LibBlockInputSignal(IndexInput, "", "",0)
%assign IndexInput = IndexInput + 1
%if LibBlockInputSignalConnected(IndexInput-1)
%if (Flag & 1) != 0
SEVTCMP = %<y>;	/* Special Event Trigger */
%else
P%<Ref>SECMP = %<y>;	/* Special Event Trigger */
%endif
%endif
%endif
%if OVDCON_Input == 1
%assign y = LibBlockInputSignal(IndexInput, "", "",0)
%assign IndexInput = IndexInput + 1
%if LibBlockInputSignalConnected(IndexInput-1)
%<P>%<Ref>OVDCON  = %<y>; /* Set Period */
%endif
%endif
%if (FltABinput & 1) != 0
%assign y = LibBlockInputSignal(IndexInput, "", "",0)
%assign IndexInput = IndexInput + 1
%if LibBlockInputSignalConnected(IndexInput-1)
if (%<y> == 1)
_FLTA%<Ref>IF = 0; /* Re-enable PWM*/
%endif
%endif
%if (FltABinput & 2) != 0
%assign y = LibBlockInputSignal(IndexInput, "", "",0)
%assign IndexInput = IndexInput + 1
%if LibBlockInputSignalConnected(IndexInput-1)
if (%<y> == 1)
_FLTB%<Ref>IF = 0; /* Re-enable PWM*/
%endif
%endif
%endfunction
%function Outputs(block, system) Output
/* PWM Output Function !! */
%assign Instanciation = CAST("Number",block.RTWdata.Instanciation)
%if Instanciation == 0
%assign block = ::MCHP_PWM_Block 
%endif
%assign PWM_REF = CAST("Number",block.RTWdata.PWM_REF)
%assign Flag = CAST("Number",block.RTWdata.Flag)
%assign InputGlobalPeriod = CAST("Number",block.RTWdata.InputGlobalPeriod)
%assign TriggerEvent_input = CAST("Number",block.RTWdata.TriggerEvent_input)
%assign FltABinput = CAST("Number",block.RTWdata.FltABinput)
%assign OVDCON_Input = CAST("Number",block.RTWdata.OVDCON_Input)
%assign OutputFaultAB = CAST("Number",block.RTWdata.OutputFaultAB)
%assign PxFLTACON = CAST("Number",block.RTWdata.PxFLTACON)
%assign PxFLTBCON = CAST("Number",block.RTWdata.PxFLTBCON)
%assign port_FLT = CAST("String",block.RTWdata.port_FLT)
%assign port_FLT = FEVAL("str2num",port_FLT)
%assign port_FLT = FEVAL("int32",port_FLT)
%assign EnableChannels = CAST("String",block.RTWdata.EnableChannels)
%assign EnableChannels = FEVAL("str2num",EnableChannels)
%assign EnableChannels = FEVAL("int32",EnableChannels)		
%if PWM_REF == 0
%assign P = ""
%assign Ref = ""
%else
%assign P = "P"
%assign Ref = PWM_REF
%endif
%assign IndexOutput = 0
%if (OutputFaultAB & 1) != 0
%assign u = LibBlockOutputSignal(IndexOutput, "", "",0)
%assign IndexOutput = IndexOutput + 1
%if LibBlockOutputSignalConnected(IndexOutput-1)
%if ((%<PxFLTACON & 256>) == 0)
%<u> = _FLTA%<Ref>IF;	
%else
%assign port_FLTA_Pin = CAST("Number",%<port_FLT[0]> % 16)
%assign port_FLTA_Letter = STRINGOF([%<port_FLT[0] / 16 + 65>])
%<u> = _FLTA%<Ref>IF | ! PORT%<port_FLTA_Letter>bits.R%<port_FLTA_Letter>%<port_FLTA_Pin>;
_FLTA%<Ref>IF = 0;
%endif
%endif
%endif
%if (OutputFaultAB & 2) != 0
%assign u = LibBlockOutputSignal(IndexOutput, "", "",0)
%assign IndexOutput = IndexOutput + 1
%if LibBlockOutputSignalConnected(IndexOutput-1)
%if ((%<PxFLTBCON & 256>) == 0)
%<u> = _FLTB%<Ref>IF;	
%else
%assign port_FLTB_Pin = CAST("Number",%<port_FLT[1]> % 16)
%assign port_FLTB_Letter = STRINGOF([%<port_FLT[1] / 16 + 65>])
%<u> = _FLTB%<Ref>IF | ! PORT%<port_FLTB_Letter>bits.R%<port_FLTB_Letter>%<port_FLTB_Pin>;
_FLTB%<Ref>IF = 0;
%endif
%endif
%endif
%endfunction
