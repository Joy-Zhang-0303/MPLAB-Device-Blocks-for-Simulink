
%function Outputs_MCHP_Digital_Output_Read(block, system) Output
/* MCHP_Digital_Output_Read Block: %<Name>/Output */
%assign PORT = CAST("String",block.RTWdata.Port)
%assign PINS = MchpVector(block.RTWdata.Pins)
%assign nPars = SIZE(PINS,1)
%assign SIMULTANEOUS = CAST("Number",block.RTWdata.Simultaneous_Flag)
%assign PACK = CAST("Number",block.RTWdata.Pack_Flag)
%assign PORTidx = FEVAL("uint8",PORT) - FEVAL("uint8","A")
%if PACK
%if !LibBlockOutputSignalIsExpr(0)
%assign u = LibBlockOutputSignal(0, "", "", 0)
%<u> = PORT_REGS->GROUP[%<PORTidx>].PORT_OUT ;	/* Read port P%<PORT> */
%endif 
%else
%if SIMULTANEOUS
{
uint32_T ReadPort%<PORT> = PORT_REGS->GROUP[%<PORTidx>].PORT_OUT;	/* Read port P%<PORT> */
%foreach idx=nPars
%if %<PINS[idx]> != -1	
%assign u = LibBlockOutputSignal(idx, "", "", 0)
%<u> = (0 != (ReadPort%<PORT> & %< MchpHex( 1U << PINS[idx])>));	/* extract pin P%<PORT>%<PINS[idx]> */
%endif
%endforeach
}
%else
%foreach idx=nPars
%if !LibBlockOutputSignalIsExpr(idx)
%if %<PINS[idx]> != -1	
%assign u = LibBlockOutputSignal(idx, "", "", 0)
%<u> = (0 != (PORT_REGS->GROUP[%<PORTidx>].PORT_OUT & %< MchpHex( 1U << PINS[idx])>));	/* Read pin P%<PORT>%<PINS[idx]> */
%endif
%endif 
%endforeach
%endif
%endif
%endfunction
%function BlockOutputSignal_MCHP_Digital_Output_Read(block,system,portIdx,ucv,lcv,idx,retType) void
%assign PORT = CAST("String",block.RTWdata.Port)
%assign PINS = MchpVector(block.RTWdata.Pins)
%assign SIMULTANEOUS = CAST("Number",block.RTWdata.Simultaneous_Flag)
%assign PACK = CAST("Number",block.RTWdata.Pack_Flag)
%assign PORTidx = FEVAL("uint8",PORT) - FEVAL("uint8","A")
%assign retVal = "0U"
%switch retType
%case "Signal"
%if PACK
%assign retVal = "PORT_REGS->GROUP[%<PORTidx>].PORT_OUT"
%else
%if SIMULTANEOUS
%assign errTxt = "Cannot generate output block signal code with SIMULTANEUS option set"
%<LibBlockReportError(block,errTxt)>
%else
%assign retVal = "(0 != (PORT_REGS->GROUP[%<PORTidx>].PORT_OUT & %< MchpHex( 1U << PINS[idx])>))"
%endif
%endif
%break
%default
%assign errTxt = "Unsupported return type: %<retType>"
%<LibBlockReportError(block,errTxt)>
%break
%endswitch
%return retVal
%endfunction
