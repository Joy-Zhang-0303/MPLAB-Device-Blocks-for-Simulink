
%function Mchp_asm_ABset(Variable,bit) Output
%if bit == 0
%<Variable> = %<Variable> | 1;	 	/* Atomic bit-set of bit 0 */
%else	
%<Variable> = %<Variable> | (1UL << %<bit>);	 	/* Atomic bit-set : %<Variable> |= %< 1U << bit > */
%endif
%endfunction
%function Mchp_asm_ABclr(Variable,bit) Output
%if bit == 0
%<Variable> = %<Variable> & (~ 1UL);		/* Atomic bit-clear of %<Variable> bit 0 */
%else
%<Variable> = %<Variable> & (~(1UL << %<bit>));		/* Atomic bit-clear of %<Variable> bit %< 1U << bit > */
%endif
%endfunction
%function Mchp_asm_Ainc(Variable) Output
/* Atomic increment operation */
%<Mchp_asm_DisableAllInterrupt()>
%<Variable>++;	/* ensure atomic increment of %<Variable> */		
%<Mchp_asm_EnableAllInterrupt()>
%endfunction
%function Mchp_asm_Adec(Variable) Output
/* Atomic decrement operation */
%<Mchp_asm_DisableAllInterrupt()>
%<Variable>--;	/* ensure atomic decrement of %<Variable> */ 		
%<Mchp_asm_EnableAllInterrupt()>
%endfunction
%function Mchp_asm_DisableSchedulerInterrupt() Output
%<Mchp_asm_DisableAllInterrupt()>
%endfunction
%function Mchp_asm_EnableSchedulerInterrupt() Output
%<Mchp_asm_EnableAllInterrupt()>	
%endfunction
%function Mchp_asm_DisableAllInterrupt() Output
__disable_irq(); /* Disable all interrupts */
%endfunction
%function Mchp_asm_EnableAllInterrupt() Output
__enable_irq();
%endfunction
