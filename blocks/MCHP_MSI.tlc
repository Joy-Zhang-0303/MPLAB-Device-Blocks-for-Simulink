%implements  MCHP_MSI  "C"
%include "MCHP_Functions.tlc"
%assign ::MCHP_MSI_mailbox_useProtocol = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MSI_mailbox_haveDatatype = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MSI_protocol_hasNmailbox = [ -1,-1,-1,-1,-1,-1,-1,-1 ]
%assign ::MCHP_MSI_protocol_StartAtMailbox = [ -1,-1,-1,-1,-1,-1,-1,-1 ]
%function BlockTypeSetup(block, system) Output
%endfunction
%function BlockInstanceSetup(block, system) void
%endfunction
%function Start(block, system) Output
%assign ::MCHP_MSI_mailbox_useProtocol = MchpLocal2Global(block,::MCHP_MSI_mailbox_useProtocol ,  MchpVector64(block.RTWdata.MCHP_MSI_mailbox_useProtocol),"mailbox_useProtocol" , "Main - Secondary Interface inconsistancy: one mailbox is set with two different protocol.")
%assign ::MCHP_MSI_mailbox_haveDatatype = MchpLocal2Global(block,::MCHP_MSI_mailbox_haveDatatype ,  MchpVector64(block.RTWdata.MCHP_MSI_mailbox_haveDatatype),"mailbox_haveDatatype" , "Main - Secondary Interface inconsistancy: one mailbox is set with two different datatype.")
%assign ::MCHP_MSI_protocol_hasNmailbox = MchpLocal2Global(block,::MCHP_MSI_protocol_hasNmailbox ,  MchpVector64(block.RTWdata.MCHP_MSI_protocol_hasNmailbox),"protocol_hasNmailbox" , "Main - Secondary Interface inconsistancy: one protocol is assigned with two different set of mailboxes")
%assign ::MCHP_MSI_protocol_StartAtMailbox = MchpLocal2Global(block,::MCHP_MSI_protocol_StartAtMailbox ,  MchpVector64(block.RTWdata.MCHP_MSI_protocol_StartAtMailbox),"protocol_StartAtMailbox" , "Main - Secondary Interface inconsistancy: one protocol is assigned with two different set of mailboxes")
%assign isSlave =  CAST("Number",block.RTWdata.isSlave)
%assign isMaster =  CAST("Number",block.RTWdata.isMaster)
%assign dir =  CAST("Number",block.RTWdata.dir)
%assign nData =  CAST("Number",block.RTWdata.nData)
%assign offset =  CAST("Number",block.RTWdata.offset)
%assign data =  MchpVector64(block.RTWdata.data)
%assign DoubleIs64Bits =  CAST("Number",block.RTWdata.DoubleIs64Bits)
%assign dataSize =  MchpVector64(block.RTWdata.dataSize)
%assign nMailBoxUsed =  CAST("Number",block.RTWdata.nMailBoxUsed)
%assign dataOrder =  MchpVector64(block.RTWdata.dataOrder)
%assign idxProtocol_Letter = CAST("String",block.RTWdata.idxProtocol_Letter)
%assign idxProtocol =  CAST("Number",block.RTWdata.idxProtocol)
%endfunction
%function Outputs(block, system) Output
%assign ::MCHP_MSI_mailbox_useProtocol = MchpLocal2Global(block,::MCHP_MSI_mailbox_useProtocol ,  MchpVector64(block.RTWdata.MCHP_MSI_mailbox_useProtocol),"mailbox_useProtocol" , "Main - Secondary Interface inconsistancy: one mailbox is set with two different protocol.")
%assign ::MCHP_MSI_mailbox_haveDatatype = MchpLocal2Global(block,::MCHP_MSI_mailbox_haveDatatype ,  MchpVector64(block.RTWdata.MCHP_MSI_mailbox_haveDatatype),"mailbox_haveDatatype" , "Main - Secondary Interface inconsistancy: one mailbox is set with two different datatype.")
%assign ::MCHP_MSI_protocol_hasNmailbox = MchpLocal2Global(block,::MCHP_MSI_protocol_hasNmailbox ,  MchpVector64(block.RTWdata.MCHP_MSI_protocol_hasNmailbox),"protocol_hasNmailbox" , "Main - Secondary Interface inconsistancy: one protocol is assigned with two different set of mailboxes")
%assign ::MCHP_MSI_protocol_StartAtMailbox = MchpLocal2Global(block,::MCHP_MSI_protocol_StartAtMailbox ,  MchpVector64(block.RTWdata.MCHP_MSI_protocol_StartAtMailbox),"protocol_StartAtMailbox" , "Main - Secondary Interface inconsistancy: one protocol is assigned with two different set of mailboxes")
%assign isSlave =  CAST("Number",block.RTWdata.isSlave)
%assign isMaster =  CAST("Number",block.RTWdata.isMaster)
%assign dir =  CAST("Number",block.RTWdata.dir)
%assign nData =  CAST("Number",block.RTWdata.nData)
%assign offset =  CAST("Number",block.RTWdata.offset)
%assign data =  MchpVector64(block.RTWdata.data)
%assign DoubleIs64Bits =  CAST("Number",block.RTWdata.DoubleIs64Bits)
%assign dataSize =  MchpVector64(block.RTWdata.dataSize)
%assign nMailBoxUsed =  CAST("Number",block.RTWdata.nMailBoxUsed)
%assign dataOrder =  MchpVector64(block.RTWdata.dataOrder)
%assign idxProtocol_Letter = CAST("String",block.RTWdata.idxProtocol_Letter)
%assign idxProtocol =  CAST("Number",block.RTWdata.idxProtocol)
%if (isSlave == 0) && (isMaster == 0)
%warning("No code writen for block Master Slave Interface (MSI) as the chip is not a dual core dsPIC")
%return
%endif
%if isSlave
%assign MSI = "SI1"
%elseif isMaster
%assign MSI = "MSI1"
%endif
%switch dir
%case 1
%case 3    
if (%<MSI>MBXSbits.DTRDY%<idxProtocol_Letter> == 0) {
%break
%case 2     
%case 4
if (%<MSI>MBXSbits.DTRDY%<idxProtocol_Letter> == 1) {
%endswitch
union
{
%if dataSize[dataOrder[nData-1]-1] == 1 
uint8_T c[%< CAST("Number",dataSize[dataOrder[0]] )>]; /* access byte level */
%endif
uint16_T regs[%< CAST("Number",dataSize[dataOrder[0]] /2 )>]; /* access uint16 to copy registers values */
uint16_T ui16;
%if dataSize[dataOrder[0]-1] >= 4
uint32_T ui32;
real32_T f32;
%endif
%if dataSize[dataOrder[0]-1] == 8
real64_T f64;
%endif
} tmp_union;
%switch dir
%case 1     
%case 3     
%assign charcount = 0
%foreach idx= nData
%assign idxData = dataOrder[idx]-1
%assign datatype = data[idxData]
%assign u = LibBlockInputSignal(idxData, "", "",0)
%switch datatype
%case 0 
tmp_union.f64 = %<u>;
%<MSI>MBX%<offset>D = tmp_union.regs[0];
%<MSI>MBX%<offset+1>D = tmp_union.regs[1];
%<MSI>MBX%<offset+2>D = tmp_union.regs[2];
%<MSI>MBX%<offset+3>D = tmp_union.regs[3];
%assign offset = offset+4
%break
%case 1 
tmp_union.f32 = %<u>;
%<MSI>MBX%<offset>D = tmp_union.regs[0];
%<MSI>MBX%<offset+1>D = tmp_union.regs[1];
%assign offset = offset+2
%break
%case 2 
%case 3 
tmp_union.c[%<charcount>] = %<u>;
%switch charcount
%case 0
%assign charcount = 1
%break
%case 1
%assign charcount = 0
%<MSI>MBX%<offset>D = tmp_union.regs[0];
%assign offset = offset+1
%break
%endswitch
%break
%case 4 
%case 5 
%<MSI>MBX%<offset>D = %<u>;
%assign offset = offset+1
%break
%case 6 
%case 7 
tmp_union.ui32 = %<u>;
%<MSI>MBX%<offset>D = tmp_union.regs[0];
%<MSI>MBX%<offset+1>D = tmp_union.regs[1];
%assign offset = offset+2
%break
%endswitch
%endforeach
%if charcount
%<MSI>MBX%<offset>D = tmp_union.regs[0];
%assign offset = offset+1
%endif
%break
%case 2     
%case 4     
%assign charcount = 0
%foreach idx= nData
%assign idxData = dataOrder[idx]-1
%assign datatype = data[idxData]
%assign y = LibBlockOutputSignal(idxData, "", "",0)
%switch datatype
%case 0 
tmp_union.regs[0] = %<MSI>MBX%<offset>D ;
tmp_union.regs[1] = %<MSI>MBX%<offset+1>D ;
tmp_union.regs[2] = %<MSI>MBX%<offset+2>D ;
tmp_union.regs[3] = %<MSI>MBX%<offset+3>D ;
%<y> = tmp_union.f64;
%assign offset = offset+4
%break
%case 1 
tmp_union.regs[0] = %<MSI>MBX%<offset>D ;
tmp_union.regs[1] = %<MSI>MBX%<offset+1>D ;
%<y> = tmp_union.f32;
%assign offset = offset+2
%break
%case 2 
%case 3 
%switch charcount
%case 0
tmp_union.regs[0] = %<MSI>MBX%<offset>D ;
%assign offset = offset+1
%<y> = tmp_union.c[%<charcount>];
%assign charcount = 1
%break
%case 1
%assign charcount = 0
%<y> = tmp_union.c[%<charcount>];
%break
%endswitch
%break
%case 4 
%case 5 
%<y> = %<MSI>MBX%<offset>D;
%assign offset = offset+1
%break
%case 6 
%case 7 
tmp_union.regs[0] = %<MSI>MBX%<offset>D ;
tmp_union.regs[1] = %<MSI>MBX%<offset+1>D ;
%<y> = tmp_union.ui32;
%assign offset = offset+2
%break
%endswitch
%endforeach
%break
%endswitch
}
%endfunction
%function Update(block, system) Output
%endfunction
