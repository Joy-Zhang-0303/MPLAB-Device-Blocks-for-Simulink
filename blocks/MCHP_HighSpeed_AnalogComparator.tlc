%implements  MCHP_HighSpeed_AnalogComparator  "C"
%function BlockTypeSetup(block, system) Output
%endfunction
%function BlockInstanceSetup(block, system) void
%endfunction
%function InitializeConditions (block, system) Output
%endfunction
%function Start(block, system) Output
%assign ChipIdL1 = CAST("String",RTWGenSettings.ChipIdL1)
%assign ChipIdL2 = CAST("String",RTWGenSettings.ChipIdL2)
%assign ChipIdL3 = CAST("String",RTWGenSettings.ChipIdL3)
%assign ChipIdN =  MchpVector(RTWGenSettings.ChipIdN)
%assign reg_CMPxCON = MchpVector(block.RTWdata.reg_CMPxCON)
%assign reg_CMPxDAC = MchpVector(block.RTWdata.reg_CMPxDAC)
%assign SharedRessource_DACOUT1 = MchpVector(block.RTWdata.SharedRessource_DACOUT1)
%assign SharedRessource_DACOUT2 = MchpVector(block.RTWdata.SharedRessource_DACOUT2)
%if EXISTS(::Global_SharedRessource_DACOUT1) == 0
%assign ::Global_SharedRessource_DACOUT1 = 0
%assign ::Global_SharedRessource_DACOUT2 = 0
%endif
%foreach idx = SIZE(SharedRessource_DACOUT1,1)
%if (::Global_SharedRessource_DACOUT1 != 0) && (SharedRessource_DACOUT1[idx] != 0)
%<LibBlockReportError(block,"DACOUT1 output is short-circuited as it is used by at least two peripherals (might e either PGA or High Speed Comparator)")>
%endif
%if (::Global_SharedRessource_DACOUT2 != 0) && (SharedRessource_DACOUT2[idx] != 0)
%<LibBlockReportError(block,"DACOUT2 output is short-circuited as it is used by at least two peripherals (might e either PGA or High Speed Comparator)")>
%endif
%assign ::Global_SharedRessource_DACOUT1 = ::Global_SharedRessource_DACOUT1 || SharedRessource_DACOUT1[idx]
%assign ::Global_SharedRessource_DACOUT2 = ::Global_SharedRessource_DACOUT2 || SharedRessource_DACOUT2[idx]
%endforeach
%foreach idx= SIZE(reg_CMPxCON,1)	
%if reg_CMPxCON[idx] != -1	
CMP%<idx+1>DAC = %<reg_CMPxDAC[idx]>;	/* Set Comparator threshold */
CMP%<idx+1>CON = %<MchpHex(reg_CMPxCON[idx])>;	/* Configure Comparator */
%endif
%endforeach
%endfunction
%function Outputs(block, system) Output
%assign ChipIdL1 = CAST("String",RTWGenSettings.ChipIdL1)
%assign ChipIdL2 = CAST("String",RTWGenSettings.ChipIdL2)
%assign ChipIdL3 = CAST("String",RTWGenSettings.ChipIdL3)
%assign ChipIdN =  MchpVector(RTWGenSettings.ChipIdN)
%assign reg_CMPxCON = MchpVector(block.RTWdata.reg_CMPxCON)
%assign CMREF_Input = MchpVector(block.RTWdata.CMREF_Input)
%assign BlockOutputComparator = MchpVector(block.RTWdata.BlockOutputComparator)
%assign IndexOutput = 0
%foreach idx= SIZE(BlockOutputComparator,1)	
%if (BlockOutputComparator[idx] == 1) && (reg_CMPxCON[idx] != -1)
%assign uConnected = LibBlockOutputSignalConnected(IndexOutput)					
%if uConnected
%assign u = LibBlockOutputSignal(IndexOutput, "", "",0)
%<u> = CMP%<idx+1>CONbits.CMPSTAT;	/* Comparator output (including Polarity setting) */
%endif
%assign IndexOutput = IndexOutput+1
%endif
%endforeach
%assign IndexInput = 0
%foreach idx= SIZE(CMREF_Input,1)	
%if (CMREF_Input[idx] == 1) && (reg_CMPxCON[idx] != -1)	
%assign yConnected = LibBlockInputSignalConnected(IndexInput)					
%if yConnected
%assign y = LibBlockInputSignal(IndexInput, "", "",0)
CMP%<idx+1>DAC = %<y>; /* live update of Comparator DAC reference voltage */
%endif
%assign IndexInput = IndexInput+1		
%endif
%endforeach
%endfunction
%function Update(block, system) Output
%endfunction
