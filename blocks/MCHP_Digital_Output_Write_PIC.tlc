%function DigitalOutputWrite_MCHP_Digital_Output_Write(block, system) Output
%assign PORT = CAST("String",block.RTWdata.Port)
%assign PortNum = CAST("Number",block.RTWdata.PortNum)
%assign PINS = MchpVector(block.RTWdata.Pins)
%assign nInputs = SIZE(PINS,1)
%assign SIMULTANEOUS = CAST("Number",block.RTWdata.Simultaneous_Flag)
%assign PACK = CAST("Number",block.RTWdata.Pack_Flag)
%assign PinsBitewise = CAST("Number",block.RTWdata.PinsBitewise)
%if PACK
%assign y = LibBlockInputSignal(0, "", "", 0)
%assign TRIS = %<MchpVector(RTWGenSettings.TRIS)>
%assign thisTRIS = TRIS[PortNum]
%if thisTRIS < 0		
%assign thisTRIS = 65535
%endif
%if (PinsBitewise | thisTRIS) == 65535	
LAT%<PORT> = %<y>; /* No mask required : all pins defined as digital output are updated */
%else
{
uint16_T register WritePort%<PORT> = LAT%<PORT>;
LAT%<PORT> = WritePort%<PORT> ^ (%<PinsBitewise> & (WritePort%<PORT> ^ %<y>)); /* Update only required pins */
}
%endif
%else 
%if (SIMULTANEOUS && (nInputs >1))
{
uint16_T register WritePort%<PORT> = LAT%<PORT>;	/* Port %<PORT>%<PINS[idx]> should not be modified by other thread before end of this sequence */
%foreach idx=nInputs
%if %<PINS[idx]> != -1	
%assign y = LibBlockInputSignal(idx, "", "", 0)
if (%<y>==1)                
WritePort%<PORT> = WritePort%<PORT> | %< 1U << PINS[idx]>;			/* Set pin %<PORT>%<PINS[idx]> */
else
WritePort%<PORT> = WritePort%<PORT> & %< 65535 - ( 1U << PINS[idx])>; /* Clear pin %<PORT>%<PINS[idx]> */
%endif
%endforeach
LAT%<PORT> = WritePort%<PORT> ; /* simultaneous update */
}
%else 
%foreach idx=nInputs
%if %<PINS[idx]> != -1	
%assign y = LibBlockInputSignal(idx, "", "", 0)
LAT%<PORT>bits.LAT%<PORT>%<PINS[idx]> = %<y>;
%endif
%endforeach
%endif
%endif
%endfunction